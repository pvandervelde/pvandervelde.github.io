<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mind Vortex</title>
    <link href="http://www.petrikvandervelde.nl/atom.xml" rel="self"/>
    <link href="http://www.petrikvandervelde.nl"/>
    <updated>2015-05-23T11:16:36.736Z</updated>
    <id>http://www.petrikvandervelde.nl</id>
    <author>
        <name>Petrik van der Velde</name>
        <email></email>
    </author>

    
        <entry>
            <title>nBuildKit release - V0.5.1</title>
            <link href="http://www.petrikvandervelde.nl/posts/2015-05-23_nBuildKit-release-V051.html"/>
            <updated>2015-05-23T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2015-05-23_nBuildKit-release-V051.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/releases/tag/0.5.1&quot;&gt;V0.5.1&lt;/a&gt; of the &lt;a href=&quot;/projects/nbuildkit.html&quot;&gt;nBuildKit&lt;/a&gt; build library has been released. &lt;/p&gt;
&lt;p&gt;This release adds the following features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/91&quot;&gt;91&lt;/a&gt;: MsBuild.Projects: Common.props should do a more extensive search for settings.props&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/90&quot;&gt;90&lt;/a&gt;: MsBuild: Allow pushing symbols via NuGet enhancement&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/89&quot;&gt;89&lt;/a&gt;: MsBuild: Allow assembly versioning to be more custom defined.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/87&quot;&gt;87&lt;/a&gt;: MsBuild: Rename template files to have normal extension&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/86&quot;&gt;86&lt;/a&gt;: MsBuild: Rename the DirMsBuildShared, DirMsBuildExtensions and DirMsBuildTemplates properties enhancement&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/85&quot;&gt;85&lt;/a&gt;: Unable to build projects which have a mixture of target frameworks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/83&quot;&gt;83&lt;/a&gt;: MsBuild: Allow PreCleanScripts and PreCompilationScripts to define their own properties&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/82&quot;&gt;82&lt;/a&gt;: MsBuild: Update the Sample custom version files to match the current version gathering capabilities&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/80&quot;&gt;80&lt;/a&gt;: MsBuild: Combine top-level build.msbuild, deploy.msbuild and shared.locatenbuildkit.msbuild&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/78&quot;&gt;78&lt;/a&gt;: MsBuild: Automatically include NuGet dependencies if nuspec is in same directory as project&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/72&quot;&gt;72&lt;/a&gt;: MsBuild: Define default directory paths only in settings.props file&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/68&quot;&gt;68&lt;/a&gt;: Improve inline documentation of settings.props file&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/66&quot;&gt;66&lt;/a&gt;: MsBuild: Provide initialization/installation scripts for an empty workspace&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/55&quot;&gt;55&lt;/a&gt;: MsBuild: Allow assembly copyright to be more custom defined&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/22&quot;&gt;22&lt;/a&gt;: MsBuild: Allow each file to have their own base directory when creating ZIP archives&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/19&quot;&gt;19&lt;/a&gt;: MsBuild.Projects: Provide scripts for Visual Basic projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And fixes the following issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/92&quot;&gt;92&lt;/a&gt;: MsBuild.Projects: GetVersion, VcsInfo and Generate files also run when they&amp;#39;re disabled in the settings.props file&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/88&quot;&gt;88&lt;/a&gt;: MsBuild.Projects: Excessive NuGet restore of global packages&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/84&quot;&gt;84&lt;/a&gt;: Not compatible with ncrunch&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/54&quot;&gt;54&lt;/a&gt;: MsBuild: First space trimmed from release note content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally the following tasks were completed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/7&quot;&gt;7&lt;/a&gt;: MsBuild: Set up tests&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>nBuildKit release - V0.4.1</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-11-30_nBuildKit-release-V041.html"/>
            <updated>2014-11-30T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-11-30_nBuildKit-release-V041.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/releases/tag/0.4.1&quot;&gt;V0.4.1&lt;/a&gt; of the &lt;a href=&quot;/projects/nbuildkit.html&quot;&gt;nBuildKit&lt;/a&gt; build library has been released. &lt;/p&gt;
&lt;p&gt;This release introduces the ability to &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/44&quot;&gt;mix custom build steps&lt;/a&gt; with the default provided ones in &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/47&quot;&gt;any order&lt;/a&gt; that is desired. On top of that additional changes were made that now make it possible to build &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/46&quot;&gt;multiple Visual Studio solutions&lt;/a&gt; in a specific order. &lt;/p&gt;
&lt;p&gt;Finally the user can provide one or more scripts that will be called if the build or the deploy process &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/issues/48&quot;&gt;fails&lt;/a&gt;. These scripts can be used to clean-up resources or provide notification on build failure. Do note that any failure in these scripts will lead to the immediate termination of the process.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating Azure VM images with Powershell</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-11-10_Creating-azure-vm-images-with-powershell.html"/>
            <updated>2014-11-10T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-11-10_Creating-azure-vm-images-with-powershell.html</id>
            <content type="html">&lt;p&gt;As part of a new &lt;a href=&quot;https://github.com/pvandervelde/azure-jenkins&quot;&gt;project&lt;/a&gt; to create a &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins CI server&lt;/a&gt; on Azure I am writing a set of powershell scripts to control virtual machines on Azure. For this project the plan is to use virtual machine (VM) images as a template for an &lt;a href=&quot;http://martinfowler.com/bliki/ImmutableServer.html&quot;&gt;&amp;#39;immutable server&amp;#39;&lt;/a&gt; that will contain the Jenkins instance. &lt;/p&gt;
&lt;p&gt;Now the actual server isn&amp;#39;t really &amp;#39;immutable&amp;#39; given that the jenkins instance will update, add and delete files on the hard drive which will obviously change the state of the server. As such the immutable idea isn&amp;#39;t applied to the whole server but more to the configuration part of the server. The idea being that the configuration of the server will not be changed once the server is put in production. Any configuration changes (e.g. a new version of Jenkins) will be done by creating a new image, spinning up a new server based on that image and then destroying the old server and replacing it with the new one.  &lt;/p&gt;
&lt;p&gt;So in order to achieve this goal the first step will be to build an image with all the required software on it and then verify that this image has indeed been created correctly.&lt;/p&gt;
&lt;p&gt;To create the image we first obtain a certificate that can be used for the WinRM SSL connection between the Azure VM and the local machine that is executing the creation scripts. You can either get an official one or you can use a self-signed certificate (which is obviously less secure). Two things of interest are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The certificate needs to have an &lt;a href=&quot;http://consultingblogs.emc.com/gracemollison/archive/2010/02/19/creating-and-using-self-signed-certificates-for-use-with-azure-service-management-api.aspx&quot;&gt;exportable&lt;/a&gt; private key because otherwise it cannot be used for the WinRM connection.&lt;/li&gt;
&lt;li&gt;The certificate needs to be named after the connection that you expect to make. For a connection to an Azure VM this will most likely be something like &lt;code&gt;&amp;lt;RESOURCE_GROUP_NAME&amp;gt;.cloudapp.net&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the certificate is installed in the user certificate store we can create a new virtual machine from a given base image, e.g. a Windows 2012 R2 server image. The following powershell function creates a new windows VM with a WinRM endpoint with the certificate that was created earlier. Note that the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dn495254.aspx&quot;&gt;&lt;code&gt;New-AzureVM&lt;/code&gt;&lt;/a&gt; function can create resource and storage groups for the new VM if you don&amp;#39;t specify a storage account and a matching resource group.&lt;/p&gt;
&lt;script src='https://gist.github.com/1153f249115780ed2b99.js'&gt;&lt;/script&gt;

&lt;p&gt;Once the VM is running a new Powershell remote session can be opened to the machine in order to start the configuration of the machine. Note that this approach only seems to be working for &lt;code&gt;https&lt;/code&gt; connections because the &lt;code&gt;Get-AzureWinRMUri&lt;/code&gt; function only returns the &lt;code&gt;https&lt;/code&gt; URI. Hence the need for a certificate that can be used to secure the connection.&lt;/p&gt;
&lt;script src='https://gist.github.com/eb6e28934d5fd16fe186.js'&gt;&lt;/script&gt;

&lt;p&gt;The next step is to copy all the installer files and configuration scripts to the VM. This can be done over the &lt;a href=&quot;http://measureofchaos.wordpress.com/2012/09/26/copying-files-via-powershell-remoting-channel/&quot;&gt;remoting channnel&lt;/a&gt;. &lt;/p&gt;
&lt;script src='https://gist.github.com/b2f5b4156e5efe67f495.js'&gt;&lt;/script&gt;

&lt;p&gt;Once all the required files have been copied to the VM the configuration of the machine can be started. This can be done in many different ways, e.g through the use of a &lt;a href=&quot;https://www.getchef.com/&quot;&gt;configuration&lt;/a&gt; &lt;a href=&quot;http://puppetlabs.com/&quot;&gt;management&lt;/a&gt; &lt;a href=&quot;http://technet.microsoft.com/en-us/library/dn249912.aspx&quot;&gt;tool&lt;/a&gt; or just via the use of plain old scripts. When the configuration is complete and all the necessary clean-up has been done the time has come to turn the VM into an image. Before doing that a Windows machine will have to be &lt;a href=&quot;http://en.wikipedia.org/wiki/Sysprep&quot;&gt;sysprepp&amp;#39;ed&lt;/a&gt; so that there are no unique identifiers in the image (and thus in the copies).&lt;/p&gt;
&lt;p&gt;In order to sysprep an Azure VM it is necessary to execute the sysprep command through a script on the VM because sysprep &lt;a href=&quot;http://blogs.msdn.com/b/brocode/archive/2014/06/20/how-to-automate-sysprep-of-an-iaas-vm-on-microsoft-azure.aspx&quot;&gt;fails&lt;/a&gt; if the command is given directly through the remoting channel. The following function creates a new Powershell script which invokes sysprep, copies that to the VM and then executes that script. Once sysprep has completed running the machine will be turned off and an image can be created. &lt;/p&gt;
&lt;script src='https://gist.github.com/349767f804a32195ee67.js'&gt;&lt;/script&gt;

&lt;p&gt;The next step is to test the new image in order to verify that all configuration changes have been applied correctly. The explanation of how the testing of an virtual machine image works is a topic for the next blog post.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Building and delivering nBuildKit with AppVeyor</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-09-27_Building-and-delivering-nBuildKit-with-AppVeyor.html"/>
            <updated>2014-09-27T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-09-27_Building-and-delivering-nBuildKit-with-AppVeyor.html</id>
            <content type="html">&lt;p&gt;The build server that is being used to build the packages for &lt;a href=&quot;/projects/nbuildkit.html&quot;&gt;nBuildKit&lt;/a&gt; is &lt;a href=&quot;http://www.appveyor.com/&quot;&gt;AppVeyor&lt;/a&gt;. AppVeyor is an Continuous Integration system in the cloud. The way AppVeyor works is that every time a commit occurs in a GitHub project AppVeyor is notified. AppVeyor then spins up a new clean virtual machine (VM) on which your build scripts are executed. Once the build is done the VM is terminated and thrown away. This way there is no way that the changes made to the build environment by a build will influence future builds.  &lt;/p&gt;
&lt;p&gt;For nBuildKit two builds were configured. The first configuration is the standard &lt;a href=&quot;https://ci.appveyor.com/project/pvandervelde/nbuildkit&quot;&gt;continuous integration&lt;/a&gt; build which generates the version numbers and templates and then creates the NuGet packages. As the final step the build artefacts are archived for later use by the second build configuration.
For this configuration no special settings are required other then to tell AppVeyor to store the artifacts.&lt;/p&gt;
&lt;p&gt;The second build configuration handles the &lt;a href=&quot;https://ci.appveyor.com/project/pvandervelde/nbuildkit-244&quot;&gt;delivery&lt;/a&gt; of the artefacts. This configuration gathers the build artefacts from the latest build of the first build configuration, tags the revision that was build and then pushes the NuGet packages to &lt;a href=&quot;http://www.nuget.org/packages/nbuildkit.msbuild&quot;&gt;NuGet.org&lt;/a&gt; and marks the given commit as a release in &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/releases&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this second configuration a few tweaks need to be made to the environment before the build can be executed. The first thing to do is to install the &lt;a href=&quot;https://github.com/aktau/github-release&quot;&gt;GitHub-release&lt;/a&gt; application which provides an easy way to push release information to github. A simple Powershell script is used to set-up this part of the environment: &lt;/p&gt;
&lt;script src='https://gist.github.com/77bd834239d9f67c40d7.js'&gt;&lt;/script&gt;

&lt;p&gt;Once all the required tools are installed the artefacts of the selected continuous integration build need to be downloaded and placed in the correct directories. For that yet another Powershell script is used:&lt;/p&gt;
&lt;script src='https://gist.github.com/9cf270ef5266b18a1ac9.js'&gt;&lt;/script&gt;

&lt;p&gt;Once all the artefacts are restored the delivery process can be executed. For nBuildKit the delivery process is executed by nBuildKit itself in the standard dogfooding approach that is so well known in the software business.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>nBuildKit release - V0.3.2</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-08-19_nBuildKit-release-V032.html"/>
            <updated>2014-08-19T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-08-19_nBuildKit-release-V032.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/releases/tag/0.3.2&quot;&gt;V0.3.2&lt;/a&gt; of the &lt;a href=&quot;/projects/nbuildkit.html&quot;&gt;nBuildKit&lt;/a&gt; build library has been released. &lt;/p&gt;
&lt;p&gt;This release introduces a version provider using &lt;a href=&quot;https://github.com/Particular/GitVersion&quot;&gt;GitVersion&lt;/a&gt; and a custom version provider that can be implemented by a user. On top of that the &lt;a href=&quot;https://www.nuget.org/packages/nBuildKit.MsBuild.Projects.Common/&quot;&gt;nBuildKit.MsBuild.Projects.Common&lt;/a&gt; and &lt;a href=&quot;https://www.nuget.org/packages/nBuildKit.MsBuild.Projects.Common.Net/&quot;&gt;nBuildKit.MsBuild.Projects.Common.Net&lt;/a&gt; packages have been merged with the &lt;a href=&quot;https://www.nuget.org/packages/nBuildKit.MsBuild.Projects.CSharp/&quot;&gt;C#&lt;/a&gt; and &lt;a href=&quot;https://www.nuget.org/packages/nBuildKit.MsBuild.Projects.WiX/&quot;&gt;WiX&lt;/a&gt; packages.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Adding pagination with DocPad</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-07-26_Adding-pagination-with-DocPad.html"/>
            <updated>2014-07-26T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-07-26_Adding-pagination-with-DocPad.html</id>
            <content type="html">&lt;p&gt;Last year when I started this blog I decided to keep the layout as simple as possible, hence all the posts were just added to the home page and to their own page. Over time as more posts were written the home page got larger and larger making it slower to load and more difficult to navigate. In order to improve this &lt;a href=&quot;https://github.com/pvandervelde/mindvortex/commit/9472ad503725eb42d98e30b6c4452d2b6766b344&quot;&gt;pagination&lt;/a&gt; of the home page was introduced.&lt;/p&gt;
&lt;p&gt;Once again &lt;a href=&quot;http://docpad.org/&quot;&gt;DocPad&lt;/a&gt; makes this very easy because all you have to do is add the &lt;a href=&quot;https://github.com/docpad/docpad-plugin-paged&quot;&gt;DocPad-paged&lt;/a&gt; plugin and then update the documents you want to split. In the case of this blog only the index page needed to be split. The new index page now looks like this:&lt;/p&gt;
&lt;script src='https://gist.github.com/26f698e7c7099033188f.js'&gt;&lt;/script&gt;

&lt;p&gt;In order to make the paged plugin do its work the following &amp;#39;properties&amp;#39; were added to the header:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;isPaged&lt;/strong&gt; - Indicates that the document should be broken up into multiple pages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pageCollection&lt;/strong&gt; - The collection from which the sub-documents that will fill up the current page are taken.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pageSize&lt;/strong&gt; - The number of sub-documents per page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally two buttons were added to the bottom of the page to naviage to he newer and the older posts.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Blog archives by DocPad</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-07-24_Blog-archives-by-DocPad.html"/>
            <updated>2014-07-24T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-07-24_Blog-archives-by-DocPad.html</id>
            <content type="html">&lt;p&gt;A while ago I decided that it was time to add an &lt;a href=&quot;/archives.html&quot;&gt;archive&lt;/a&gt; page to the website so that there would be a place to get a quick overview of all the posts that I have written. Fortunately setting up an archive page with &lt;a href=&quot;http://docpad.org/&quot;&gt;DocPad&lt;/a&gt; is relatively &lt;a href=&quot;https://github.com/pvandervelde/mindvortex/commit/31698aa10fd205f41999e0b89792744a2bb8b82b&quot;&gt;simple&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The first step to take was to add a new layout for the archive page.&lt;/p&gt;
&lt;script src='https://gist.github.com/b7434bc8a1b7eb240da9.js'&gt;&lt;/script&gt;

&lt;p&gt;The layout gets the list of all posts and iterates over them in chronological order. All the posts for one year are grouped together under a header titled after the year. In keeping with the layout of the rest of the site each post gets a title, the day and month and the tags that belong to that post. In order for this specific layout to work you will need to add the &lt;code&gt;moment&lt;/code&gt; node.js package&lt;/p&gt;
&lt;p&gt;The layout and the CSS for the archive page is heavily based on the layout created by &lt;a href=&quot;http://www.jptacek.com/&quot;&gt;John Ptacek&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>nBuildKit release - V0.2.4</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-07-21_nBuildKit-release-V024.html"/>
            <updated>2014-07-21T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-07-21_nBuildKit-release-V024.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/releases/tag/0.2.4&quot;&gt;V0.2.4&lt;/a&gt; of the &lt;a href=&quot;/projects/nbuildkit.html&quot;&gt;nBuildKit&lt;/a&gt; build library has been released. &lt;/p&gt;
&lt;p&gt;This release introduces NuGet packages that allow Visual Studio &lt;a href=&quot;https://www.nuget.org/packages/nBuildKit.MsBuild.Projects.CSharp/&quot;&gt;C#&lt;/a&gt; and &lt;a href=&quot;https://www.nuget.org/packages/nBuildKit.MsBuild.Projects.WiX/&quot;&gt;WiX&lt;/a&gt; projects to share a common configuration including code analysis and strong naming capabilities and to generate one or more source files before building the project.&lt;/p&gt;
&lt;p&gt;Both packages provide the ability to share a configuration between multiple projects in a Visual Studio solution. The shared configuration can contain items like Debug and Release settings, targeted .NET framework, code analysis settings and many other options.&lt;/p&gt;
&lt;p&gt;Beyond that the C# NuGet package provides capabilities to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate &lt;code&gt;AssemblyInfo.XXXX.cs&lt;/code&gt; files for:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AssemblyInfo.VersionNumber.cs&lt;/code&gt; contains the version numbers for the project as determined by nBuildKit from the versioning strategies provided. Currently supported are either a version number provided through an MsBuild project file or through &lt;a href=&quot;https://github.com/JakeGinnivan/GitHubFlowVersion&quot;&gt;GitHubFlowVersion&lt;/a&gt;. By allowing nBuildKit to generate the &lt;code&gt;AssemblyInfo.VersionNumber.cs&lt;/code&gt; file it is possible to automatically version the binaries the same way as all other artifacts, e.g. NuGet packages, installers, documentation etc. etc.. The version number is currently provided through the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute(v=vs.110).aspx&quot;&gt;AssemblyVersionAttribute&lt;/a&gt; as &lt;code&gt;Major.Minor.0.0&lt;/code&gt;; through the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.assemblyfileversionattribute(v=vs.110).aspx&quot;&gt;AssemblyFileVersionAttribute&lt;/a&gt; as &lt;code&gt;Major.Minor.Patch.Build&lt;/code&gt;; and through the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.assemblyinformationalversionattribute(v=vs.110).aspx&quot;&gt;AssemblyInformationalVersionAttribute&lt;/a&gt; as the full &lt;a href=&quot;http://semver.org/&quot;&gt;semantic version&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssemblyInfo.BuildInformation.cs&lt;/code&gt; contains information about the current build of the binaries. This includes the configuration, e.g. Release; the date and time that the binary was compiled and information describing the build number and the commit number that were used to generate the binaries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssemblyInfo.InternalsVisibleTo.cs&lt;/code&gt; contains the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.internalsvisibletoattribute(v=vs.110).aspx&quot;&gt;InternalsVisibleToAttribute&lt;/a&gt; values for any assemblies that should have access to the internals of the current assembly for purposes of unit testing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssemblyInfo.Company.cs&lt;/code&gt; contains the information describing the &amp;#39;company&amp;#39; that created the binaries. The information includes the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.assemblycompanyattribute(v=vs.110).aspx&quot;&gt;AssemblyCompanyAttribute&lt;/a&gt; and the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.assemblycopyrightattribute(v=vs.110).aspx&quot;&gt;AssemblyCopyrightAttribute&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generate a &lt;code&gt;CompanyInformation.cs&lt;/code&gt; source file that contains an internal static class providing constants for the company name and the company URL.&lt;/li&gt;
&lt;li&gt;Generate a &lt;code&gt;ProductInformation.cs&lt;/code&gt; source file that contains an internal static class providing constants for the name of the product. &lt;/li&gt;
&lt;li&gt;Generate an &lt;code&gt;app.manifest&lt;/code&gt; file with the current project version number.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the WiX NuGet package provides capabilities to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate a &lt;code&gt;VersionNumber.wxi&lt;/code&gt; WiX include file that contains the version numbers for the application and the installer.&lt;/li&gt;
&lt;li&gt;Generate a &lt;code&gt;CompanyInformation.wxi&lt;/code&gt; WiX include file that contains the name and URL of the company that produces the product.&lt;/li&gt;
&lt;li&gt;Generate a &lt;code&gt;ProductInformation.wxi&lt;/code&gt; WiX include file that contains the name and description of the product.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The generation of all of these files can be enabled through a setting in the &lt;code&gt;settings.props&lt;/code&gt; file that is also used by the &lt;a href=&quot;https://www.nuget.org/packages/nBuildKit.MsBuild/&quot;&gt;nBuildKit.MsBuild&lt;/a&gt; NuGet package &lt;/p&gt;
&lt;p&gt;The documentation for this library can be found on the nBuildKit &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/wiki/MsBuild&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>nBuildKit release - V0.1.5</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-06-16_nBuildKit-release-V015.html"/>
            <updated>2014-06-16T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-06-16_nBuildKit-release-V015.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/releases/tag/0.1.5&quot;&gt;V0.1.5&lt;/a&gt; of the &lt;a href=&quot;/projects/nbuildkit.html&quot;&gt;nBuildKit&lt;/a&gt; build library has been released. &lt;/p&gt;
&lt;p&gt;This first release introduces the &lt;a href=&quot;https://www.nuget.org/packages/nBuildKit.MsBuild/0.1.5&quot;&gt;MsBuild&lt;/a&gt; NuGet package. This package contains build scripts that provide the ability to perform a complete build consisting of workspace preparation, compilation of binaries, execution of unit tests, analysis of source code and binaries and finally packing of the binaries as NuGet packages or ZIP archives.
The &lt;code&gt;nBuildKit.MsBuild&lt;/code&gt; NuGet package also provides scripts that can be used to tag a release in the version control system (VCS) and deploy the artifacts to a file server, NuGet feed or a GitHub release.&lt;/p&gt;
&lt;p&gt;The documentation for this library can be found on the nBuildKit &lt;a href=&quot;https://github.com/pvandervelde/nBuildKit/wiki/MsBuild&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Nuclei release - V0.8.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-05-28_Nuclei-release-V080.html"/>
            <updated>2014-05-28T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-05-28_Nuclei-release-V080.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/releases/tag/0.8.0&quot;&gt;V0.8.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nuclei.html&quot;&gt;Nuclei&lt;/a&gt; library has been released. &lt;/p&gt;
&lt;p&gt;This release introduces a few large features to Nuclei.Communication library and adds some minor updates to the base Nuclei library.&lt;/p&gt;
&lt;p&gt;The main focus of this release was adding version tolerance (&lt;a href=&quot;https://github.com/pvandervelde/Nuclei/issues/3&quot;&gt;#3&lt;/a&gt;) to the different layers of the communication stack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;The discovery layer&lt;/em&gt; - Provides ways to discover remote endpoints either automatically (via &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd456782%28v=vs.110%29.aspx&quot;&gt;WCF discovery&lt;/a&gt;) or manually.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The protocol layer&lt;/em&gt; - Provides the means to send messages to one or more remote endpoints and handling the responses to those messages if they are expected.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The interaction layer&lt;/em&gt; -  Provides an abstraction over the &lt;em&gt;protocol layer&lt;/em&gt; in the form of an proxy objects that provide user-defined methods which can be invoked on a remote endpoint.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In version 0.8.0 of the Nuclei.Communication library each of these layers now supports the ability to negotiate with a remote endpoint to determine which communication version will be used to exchange data between the endpoints. The  communication version which will be used is the highest (i.e. most recent) version that both endpoints support. If the endpoint do not support the same versions then communication will not be enabled between the endpoints.&lt;/p&gt;
&lt;p&gt;The second focus was to improve the robustness of all the network activity. The main changes here were: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Nuclei/issues/7&quot;&gt;#7&lt;/a&gt; - Detection of messages that have not received their response within a given time-out.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Nuclei/issues/11&quot;&gt;#11&lt;/a&gt;, &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/pull/17&quot;&gt;#17&lt;/a&gt;, &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/pull/18&quot;&gt;#18&lt;/a&gt; - Method(s) to detect if a remote endpoint is still available and discard endpoint information if it is not.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Nuclei/issues/19&quot;&gt;#19&lt;/a&gt;, &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/issues/23&quot;&gt;#23&lt;/a&gt; - Automatically rebuilding the communication channel if it faults during message sending and then resend the message that caused the faulting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The final focus was on decoupling the interaction interfaces from their implementations. With these changes an endpoint does not need to provide concrete implementations of either the command (&lt;a href=&quot;https://github.com/pvandervelde/Nuclei/pull/6&quot;&gt;#6&lt;/a&gt;) and notification (&lt;a href=&quot;https://github.com/pvandervelde/Nuclei/pull/31&quot;&gt;#31&lt;/a&gt;) interfaces but can map the members on those interfaces to equivalent members on any given object.&lt;/p&gt;
&lt;p&gt;Additionally it is now possible for some parameters on a command interface method (ie. the method on a command interface) and a command object method (i.e .the concrete instance method that is mapped to the given command) to contain parameters that have a special meaning. The available options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For command interface methods (&lt;a href=&quot;https://github.com/pvandervelde/Nuclei/issues/23&quot;&gt;#23&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Provision of a time-out indicating the maximum amount of time the endpoint should wait for a response to the command invocation request.&lt;/li&gt;
&lt;li&gt;Provision of a retry count indicating the maximum number of times the endpoint should send the command invocation request should any errors occur during invocation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For command instance methods (&lt;a href=&quot;https://github.com/pvandervelde/Nuclei/pull/28&quot;&gt;#28&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Provision of the ID of the endpoint requesting the invocation of the command method.&lt;/li&gt;
&lt;li&gt;Provision of the ID of the message that was send to request the invocation of the command method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally the Nuclei library versioning was switched to use &lt;a href=&quot;http://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Improvements to the site</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-05-23_Improvements-to-the-site.html"/>
            <updated>2014-05-23T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-05-23_Improvements-to-the-site.html</id>
            <content type="html">&lt;p&gt;Over the last few days some changes were made to the structure of this website. Of these changes the first change that was made is in the move from the standard GitHub pages URL to my own custom domain provided by the amazingly helpful people at &lt;a href=&quot;https://dnsimple.com/&quot;&gt;dnsimple&lt;/a&gt;. While the URL for this website has changed it is still being hosted by GitHub pages and so the old URL will continue working just fine.&lt;/p&gt;
&lt;p&gt;The only slight catch is that the project pages for my projects now suddenly redirect through my new domain as well. Apparently this is due to the way GitHub &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#overview&quot;&gt;handles&lt;/a&gt; custom domains. For now I will live with this situation but later on my personal projects may be moved to separate &lt;a href=&quot;https://help.github.com/articles/what-s-the-difference-between-user-and-organization-accounts&quot;&gt;organisations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second change is the addition of pagination for the landing page. As I continued to write more blog posts this page was getting rather long and slow to load. The new landing page only contains the last five blog posts and provides a way to navigate to the previous posts at the bottom of the page. This should make the page much quicker to load. I will share the implementation of the pagination in a future blog post but for those who are interested the changes necessary to implement pagination in &lt;a href=&quot;https://github.com/docpad/docpad-plugin-paged/&quot;&gt;DocPad&lt;/a&gt; are pretty minor and can be seen in a single &lt;a href=&quot;https://github.com/pvandervelde/mindvortex/commit/9472ad503725eb42d98e30b6c4452d2b6766b344&quot;&gt;commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Besides setting up the pagination of the landing page I also created an &lt;a href=&quot;/archive.html&quot;&gt;archive&lt;/a&gt; page which, logically, shows all the blog posts in chronological order. Again a future blog post will describe the necessary changes to include the archive page. &lt;/p&gt;
&lt;p&gt;Last but not least the site has gotten a new &lt;a href=&quot;http://en.wikipedia.org/wiki/Favicon&quot;&gt;favicon&lt;/a&gt; which is a little more vortex-y than the last icon.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Embedding a symbol stream in a PDB file</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-05-19_Embedding-symbol-stream-in-pdb.html"/>
            <updated>2014-05-19T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-05-19_Embedding-symbol-stream-in-pdb.html</id>
            <content type="html">&lt;p&gt;The &lt;a href=&quot;/projects/nanicitus.html&quot;&gt;nAnicitus&lt;/a&gt; application processes &lt;a href=&quot;http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-symbol-package&quot;&gt;NuGet symbol&lt;/a&gt; packages to push the symbols and sources up to their respective location for the symbol and source servers to work. In order to have a symbol server nothing special needs to be done, just push the symbols through the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/ff558848(v=vs.85).aspx&quot;&gt;SymStore&lt;/a&gt; application and a nice directory with indexed symbols is created. However in order to allow debuggers to obtain the source files related to a given PDB some manipulation of the PDB files is necessary. Specifically the SRCSRV stream in the PDB file needs to be &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/ff552219%28v=vs.85%29.aspx&quot;&gt;modified&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documentation gives a decent overview of how the source indexing works but it does not actually provide the information necessary to determine what should be written to the SRCSRV stream for a given PDB file. In fact if you want to know what information should be written to the SRCSRV stream if you want to store the indexed source files in a directory instead of getting them from your source control system then even the almighty &lt;a href=&quot;https://www.google.co.nz/webhp?tab=ww&amp;amp;ei=FwljU6S7J8byoATTxoLIAQ&amp;amp;ved=0CBMQ1S4#q=PDB+SRCSRV+UNC+VERSION%3D2&quot;&gt;google&lt;/a&gt; is rather quiet.   &lt;/p&gt;
&lt;p&gt;In order to write to the SRCSRV stream one can use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/ff558874%28v=vs.85%29.aspx&quot;&gt;PDBStr utility&lt;/a&gt;. However that still leaves the question of what to write to the stream. The &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms680641%28v=vs.85%29.aspx&quot;&gt;source server documentation&lt;/a&gt; provides examples for &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/ff551958%28v=vs.85%29.aspx&quot;&gt;VERSION 1&lt;/a&gt; streams, i.e. the kind that point the debugger to a source control (VCS) command. If however you want to store symbols and sources in a UNC path then you need &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/ff551966%28v=vs.85%29.aspx&quot;&gt;VERSION 2&lt;/a&gt; streams. With some help from this &lt;a href=&quot;http://www.jayway.com/2011/06/19/hosting-your-own-source-symbol-server/&quot;&gt;blog post&lt;/a&gt;, some digging at MSDN and lots of trial-and-error it seems that the SRCSRV stream should look like:  &lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs makefile&quot;&gt;SRCSRV: ini ------------------------------------------------
&lt;span class=&quot;hljs-constant&quot;&gt;VERSION&lt;/span&gt;=2
&lt;span class=&quot;hljs-constant&quot;&gt;INDEXVERSION&lt;/span&gt;=2
&lt;span class=&quot;hljs-constant&quot;&gt;VERCTRL&lt;/span&gt;=http
SRCSRV: variables ------------------------------------------
&lt;span class=&quot;hljs-constant&quot;&gt;SRCSRVVERCTRL&lt;/span&gt;=http
&lt;span class=&quot;hljs-constant&quot;&gt;UNCROOT&lt;/span&gt;= &amp;lt;UNC_SOURCE_PATH&amp;gt;
&lt;span class=&quot;hljs-constant&quot;&gt;HTTP_EXTRACT_TARGET&lt;/span&gt;=%UNCROOT%\\ + &amp;lt;UNC_SOURCE_PATH&amp;gt;
&lt;span class=&quot;hljs-constant&quot;&gt;SRCSRVTRG&lt;/span&gt;=%http_extract_target%
&lt;span class=&quot;hljs-constant&quot;&gt;SRCSRVCMD&lt;/span&gt;=
SRCSRV: source files ---------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this stream the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/ff551958%28v=vs.85%29.aspx&quot;&gt;variables mean&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Version = 2&lt;/code&gt;&lt;/strong&gt; - Indicates the version of the SRCSRV stream&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;VerCtrl = http&lt;/code&gt;&lt;/strong&gt; - &amp;#39;Version control&amp;#39; is done through HTTP. This variable is potentially optional.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;SRCSRVVERCTRL = http&lt;/code&gt;&lt;/strong&gt; - Specifies the VCS in use. In this case that&amp;#39;s UNC, potentially over http.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;UNCROOT&lt;/code&gt;&lt;/strong&gt; - &amp;#39;Local variable&amp;#39; indicating what the UNC root path is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;HTTP_EXTRACT_TARGET&lt;/code&gt;&lt;/strong&gt; - &amp;#39;Local variable&amp;#39; indicating how to determine the path of a source file on the server given it&amp;#39;s embedded path and SRCSRV information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;SRCSRVTG&lt;/code&gt;&lt;/strong&gt; - The template used by the debugger to determine the path of the source files based on their embedded path and SRCSRV information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;SRCSRVCMD&lt;/code&gt;&lt;/strong&gt; - The command for the VCS to extract the source files. For UNC this is not required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When nAnicitus processes a PDB file it generates a SRCSRV file that looks similar to this:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs mel&quot;&gt;SRCSRV: ini ------------------------------------------------
VERSION=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
INDEXVERSION=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
VERCTRL=http
SRCSRV: variables ------------------------------------------
SRCSRVVERCTRL=http
UNCROOT=\\MyServer\sources
HTTP_EXTRACT_TARGET=&lt;span class=&quot;hljs-variable&quot;&gt;%UNCROOT&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;%\&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;%var2&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;%\&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;%var3&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;%\&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;%var4&lt;/span&gt;%
SRCSRVTRG=&lt;span class=&quot;hljs-variable&quot;&gt;%http_extract_target&lt;/span&gt;%
SRCSRVCMD=
SRCSRV: &lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt; files ---------------------------------------
c:\&lt;span class=&quot;hljs-keyword&quot;&gt;source&lt;/span&gt;\MyProject\MyClass.cs&lt;span class=&quot;hljs-variable&quot;&gt;*MyProject&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;*1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.4&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;*MyProject&lt;/span&gt;\MyClass.cs
SRCSRV: end------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The redirection of the source paths is handled as &lt;code&gt;&amp;lt;FILE&amp;gt;*&amp;lt;PROJECT&amp;gt;*&amp;lt;VERSION&amp;gt;*&amp;lt;RELATIVE_FILE&amp;gt;&lt;/code&gt; which means that the &lt;code&gt;c:\source\MyProject\MyClass.cs&lt;/code&gt; file will be found on the source server at &lt;code&gt;\\MyServer\sources\MyProject\1.2.3.4\MyProject\MyClass.cs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The process of pushing the symbols and sources up to their respective locations with nAnicitus is done via the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user drops the NuGet symbol package containing the binaries, PDB files and source files into the designated upload folder for nAnicitus.&lt;/li&gt;
&lt;li&gt;nAnicitus detects the new NuGet package and pushes the file path onto the queue for processing by the indexing thread.&lt;/li&gt;
&lt;li&gt;The indexing thread pulls the file path from the queue and unzips the NuGet symbol package in a temporary location.&lt;/li&gt;
&lt;li&gt;For each PDB the source paths are extracted from the PDB with &lt;code&gt;scrtool.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For each source path the matching source file is located by looking at all source files and seeing source file path matches the &amp;#39;best&amp;#39;, i.e. using the longest common substring approach, starting from the end of the path in order to ensure a match on the file name.&lt;/li&gt;
&lt;li&gt;Once the source file is located the relative file path for the source file on the source server is calculated.&lt;/li&gt;
&lt;li&gt;Once all the source files from the PDB are processed the SRCSRV stream file is created and embedded into the PDB with &lt;code&gt;pdbstr.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once all PDBs have been indexed they are pushed through the &lt;code&gt;symstore.exe&lt;/code&gt; tool to the symbol server.&lt;/li&gt;
&lt;li&gt;The source files are copied to the desired directory on the source server.&lt;/li&gt;
&lt;li&gt;Finally the original NuGet symbol package is moved to the directory containing all the processed symbol packages. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that the path to the source server directory is embedded in the PDB. If the location of the source server changes then the information in the PDB files will no longer be correct. While there is a way to redirect the embedded paths nAnicitus also stores the processed NuGet symbol packages in a designated directory. This makes it possible to re-process the packages should the need ever arise.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>nAnicitus release - V0.1.5</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-04-30_nAnicitus-Release-V015.html"/>
            <updated>2014-04-30T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-04-30_nAnicitus-Release-V015.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/releases/tag/0.1.5&quot;&gt;V0.1.5&lt;/a&gt; of the &lt;a href=&quot;/projects/nanicitus.html&quot;&gt;nAnicitus&lt;/a&gt; symbol store application has been released.  &lt;/p&gt;
&lt;p&gt;This release fixes the following issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/issues/4&quot;&gt;#4&lt;/a&gt; - Switch versioning scheme to use Semantic Versioning. The version is automatically calculated from the previous version tags in the repository with the &lt;a href=&quot;https://github.com/JakeGinnivan/GitHubFlowVersion&quot;&gt;GitHubFlowVersion&lt;/a&gt; tool.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/issues/6&quot;&gt;#6&lt;/a&gt; - Mark all files as read-only. All source files which are copied to the the UNC directory are now marked as read-only so that users won&amp;#39;t be able to change them.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/issues/7&quot;&gt;#7&lt;/a&gt; - Srctool last message not stripped when finding source paths in PDB&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/issues/8&quot;&gt;#8&lt;/a&gt; - PDB embedded sourceserver file path calculation doesn&amp;#39;t match server path. The source server file path is now calculated for each embedded file, instead of using a single directory reference for all files.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/issues/10&quot;&gt;#10&lt;/a&gt; - Automatically create release notes from resolved GitHub issues. The release notes are created by finding all issues that have been closed between the previous and the current tag. This is using &lt;a href=&quot;https://github.com/JakeGinnivan/GitReleaseNotes&quot;&gt;GitReleaseNote&lt;/a&gt; tool.&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>GUI testing with TestStack.White</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-03-31_Regression-testing-gui-applications.html"/>
            <updated>2014-03-31T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-03-31_Regression-testing-gui-applications.html</id>
            <content type="html">&lt;p&gt;In the &lt;a href=&quot;/posts/2014-02-18_Regression-testing-console-applications.html&quot;&gt;previous&lt;/a&gt; post I explained how I created the regression tests for a script running application that belongs to the &lt;a href=&quot;/projects/apollo.html&quot;&gt;Apollo&lt;/a&gt; project. In this post I will explain how I created the regression tests for an Apollo application with a graphical user interface (UI).&lt;/p&gt;
&lt;p&gt;My initial attempt to write a regression test suite for the GUI application was done using the &lt;a href=&quot;http://www.nunit.org/&quot;&gt;NUnit&lt;/a&gt; and &lt;a href=&quot;http://scriptcs.net/&quot;&gt;ScriptCS&lt;/a&gt; with the idea that NUnit would provide the test execution and validation methods and ScriptCs would provide an easy way to write the test scripts without requiring a complete IDE to be used. After some trial-and-error it became clear that this approach was not the most suitable solution for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using NUnit, or any unit test framework for that matter, complicated things because there is no way to take control of the order in which the regression tests are executed. While the ordering of unit tests is irrelevant, the ordering of regression tests may not be in that it is accepted that regression tests involve the execution multiple, ordered tests for one single activation of the application under test (AUT).&lt;/li&gt;
&lt;li&gt;A secondary drawback of using a unit test framework is that there is normally no way to re-run a test case if it fails, something which is more acceptable for a regression test than for a unit test.&lt;/li&gt;
&lt;li&gt;The test code got rather complicated due to the many helper methods, script files etc.. While ScriptCs coped beautifully with this it turned out to hard for me to work with without the organizing features of a complete IDE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end I wrote a custom (console) application that handles the ordering and execution of the different test cases in the way that makes sense for my current requirements.&lt;/p&gt;
&lt;h4 id=&quot;testing-application&quot;&gt;Testing application&lt;/h4&gt;
&lt;p&gt;The testing application executes the tests, collects the results and logs all the outputs. When executing the tests each test is executed a maximum of three times before it is marked as a fail. The following code is used by the application to execute the test steps and to keep track of the number of times a test step is executed. &lt;/p&gt;
&lt;script src='https://gist.github.com/9202656.js?file=Apollo_Regression_ExecuteTestStep.cs'&gt;&lt;/script&gt;

&lt;script src='https://gist.github.com/9202656.js?file=Apollo_Regression_TestStep.cs'&gt;&lt;/script&gt;

&lt;p&gt;The reason for having multiple attempts to complete a test is that the nature of the GUI automation testing is that it is not completely &lt;a href=&quot;http://www.mathpirate.net/log/2009/12/23/ui-automation-tricks-and-traps/&quot;&gt;consistent&lt;/a&gt;. By allowing a test to fail twice it is possible to work around the problem of inconsistent handling of controls.&lt;/p&gt;
&lt;p&gt;The second part of the application keeps track of the test results while the tests are running. The application will always try to execute all the tests, irrespective of their final success or failure. That way the user will always have a complete report of the state of all the tests.&lt;/p&gt;
&lt;script src='https://gist.github.com/9202656.js?file=Apollo_Regression_EntryPoint.cs'&gt;&lt;/script&gt;

&lt;p&gt;Finally the application provides utility methods for logging which should be used liberally by both the application and the test steps.&lt;/p&gt;
&lt;h4 id=&quot;tests&quot;&gt;Tests&lt;/h4&gt;
&lt;p&gt;In order for the tests to interact with the GUI I chose to use the &lt;a href=&quot;https://github.com/TestStack/White&quot;&gt;TestStack.White&lt;/a&gt; library mainly because it is a mature open source library that has a number of active contributors. One thing to keep in mind when selecting a GUI automation library is that the &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_UI_Automation&quot;&gt;underlying technology&lt;/a&gt; has some tricky hooks to it that cannot be completely hidden by the automation library. One example is that all controls can be found based on their &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa349646%28v=vs.110%29.aspx&quot;&gt;automation ID&lt;/a&gt; but windows cannot, even if the window in question has an automation ID.&lt;/p&gt;
&lt;p&gt;The main piece of advice for writing UI automation tests is always to write some helper methods to hide the underlying complexity of the UI access technology. In my case I took the following steps:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Control very carefully how your helper methods return information to the caller, either through a return value or through exceptions. In my case if a helper method returns a value it should either return the requested object or null if it fails to get the requested object. The calling code should then always check for null and handle the case of a null return value, e.g. by retrying the method call. The only time the method will throw an exception is if the assumed conditions for the method are wrong, e.g. the application under test (AUT) has crashed. If the helper method has no return value then it may throw if it fails to execute.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src='https://gist.github.com/9202656.js?file=Apollo_Regression_HelpersForMenu.cs'&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;All actions that get a control will try to get the control several times if they fail. Due to the nature of UI automation it is possible that the control is not available the first time the code tries to get hold of the control. This may be due tot he fact that the automation tests are fast enough that they try to get the control in the 0.1 second that the control is not available yet. Note that this also makes for some very tricky debugging which requires a decent amount of logging. &lt;/li&gt;
&lt;/ul&gt;
&lt;script src='https://gist.github.com/9202656.js?file=Apollo_Regression_Retry.cs'&gt;&lt;/script&gt;

&lt;p&gt;Note that automation tests are usually linked strongly to a specific version of the software because the tests assume the availability of certain automation IDs and controls. Some parts are implicitly linked and others can be, but don&amp;#39;t have to be, explicitly linked. Examples are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The application, product and company names can be shared through a configuration or shared code file:&lt;/li&gt;
&lt;/ul&gt;
&lt;script src='https://gist.github.com/9202656.js?file=Apollo_Regression_CompanyInformation.cs'&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;Automation IDs can be shared via a shared code file. Note that application ID names should be pointing to a given area / functionality, not specific controls (Also note that in my case that&amp;#39;s not always done the right way):&lt;/li&gt;
&lt;/ul&gt;
&lt;script src='https://gist.github.com/9202656.js?file=Apollo_Regression_AutomationID.cs'&gt;&lt;/script&gt;

&lt;script src='https://gist.github.com/9202656.js?file=Apollo_Explorer_MenuView.xaml'&gt;&lt;/script&gt;

&lt;p&gt;When executing the tests it is a good idea to reset your application state either at the end of each test or at the start of each test. Or even better both to make sure that you always start a test from the same state irrespective of the way the previous test ended, e.g. with an application crash.&lt;/p&gt;
&lt;p&gt;Finally do not give up if you find it hard to make the tests reliable. By continually improving the robustness of the test code eventually the tests will start to behave in the way you expect them too. Some &lt;a href=&quot;http://www.mathpirate.net/log/2009/12/23/ui-automation-tricks-and-traps/&quot;&gt;tricks and hacks&lt;/a&gt; that I found necessary are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time-outs while getting controls, setting values on controls or getting values from controls. While these are ugly they are sometimes necessary.&lt;/li&gt;
&lt;li&gt;For each test restart the application if at all possible so that you end up with a known application state. This will improve the repeatability of the tests. Note that if the application is slow to start up then you can either improve the start up performance of the application or if that is not possible then carefully combine tests but be aware that tests may fail due to polluted application state. &lt;/li&gt;
&lt;li&gt;Note that some application state survives restarts, e.g. user and application settings. It would be good if you have a way of resetting that state in a relatively sure-fire way. This is something I have not implemented yet though.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then the last comment must be that the development of these tests has been much more complicated than I thought it would be. The approach I used required some coding skills so this may or may not be suitable in other situations depending on the skill sets of the testers or developers.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Regression testing of a console application</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-02-18_Regression-testing-console-applications.html"/>
            <updated>2014-02-18T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-02-18_Regression-testing-console-applications.html</id>
            <content type="html">&lt;p&gt;After &lt;a href=&quot;/posts/2013-12-04_Regression-testing-with-Sherlock.html&quot;&gt;setting up&lt;/a&gt; &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; you will need to create some tests that you can execute with Sherlock. In this post I will describe how I created the regression tests for the command line application of &lt;a href=&quot;/projects/apollo.html&quot;&gt;Apollo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this case the application-under-test (AUT) is the Apollo console application which provides the user with a way to control the capabilities of Apollo, e.g. running a fluid dynamics simulation, by executing a Python script. The goal of the regression test for the console application is to execute a large part of the API which is used by scripts to interact with the different parts of Apollo.&lt;/p&gt;
&lt;p&gt;In order to test the scripting API I wrote several scripts that will be executed during the test. Each script exercises several parts of the API and checks after each action that the state of the application is as expected. An example of a test script is given in the following code segment:&lt;/p&gt;
&lt;script src='https://gist.github.com/8995251.js'&gt;&lt;/script&gt;

&lt;p&gt;This test script:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verifies that no project exists at start-up. If one exists the test is considered failed and the script forces the application to exit with a non-zero exit code.&lt;/li&gt;
&lt;li&gt;Creates a new project and obtains a reference to the new project. If either step fails then once again the application is forced to exit with a non-zero exit code.&lt;/li&gt;
&lt;li&gt;The name of the project is changed and the script verifies that the new name has been stored.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously the script given here is a rather trivial and somewhat naive test script however it does provide an idea of what a test script should do.&lt;/p&gt;
&lt;p&gt;In order to inform Sherlock that the script execution has failed the script can either write to the error stream or it can force the application to exit with a non-zero error code. To provide data for fault analysis a test script can write to both the standard output stream and the error data stream. Information gathered from either stream will be placed in the Sherlock log, which can be copied back to the report location by setting the correct switches. Additionally any data on the error stream will be written to the test report.&lt;/p&gt;
&lt;p&gt;It is important to note that the test script should be robust enough to handle any kind of problem encountered because there is no guarantee that the application will behave in the appropriate manner, after all the application is being tested to see if it is fit for purpose.&lt;/p&gt;
&lt;p&gt;Once the test scripts are written you can create a test configuration for the different test steps. An example is given below:&lt;/p&gt;
&lt;script src='https://gist.github.com/8995455.js'&gt;&lt;/script&gt;

&lt;p&gt;The important things to note in this configuration are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each test step copies back the system log files which include:&lt;ul&gt;
&lt;li&gt;The Sherlock log file written on the test environment.&lt;/li&gt;
&lt;li&gt;Any MSI install log files.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The test script executing test step also copies the log files written by the console application.&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>PG2 - Site number five</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-01-31_PG2-Site-number-five.html"/>
            <updated>2014-01-31T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-01-31_PG2-Site-number-five.html</id>
            <content type="html">&lt;p&gt;Two weeks ago I managed to fulfil another criteria for my PG2 license by flying at the  &lt;a href=&quot;http://paraglidingnewzealand.com/places-to-fly/site/mangawhai-heads&quot;&gt;Mangawhai Heads&lt;/a&gt; for my fifth site. &lt;/p&gt;
&lt;p&gt;Unlike the other locations the launch site at Mangawhai heads is rather small, just big enough for the glider. Because of the conditions and the amount of space at the launch location I elected to do a forward launch with some assistance of the instructor. That turned out to be a good decision because as soon as the glider was above my head it caught the wind stream and I rocketed off the ground. Unfortunately with all the pre-launch action going on I had neglected to completely check my glider which meant I ended up with a small line tangle in the top C-D line which slowed my glider down a bit during flight. &lt;/p&gt;
&lt;p&gt;After about 20 minutes of flying I started to notice that my ground speed was reducing more and more, at which point I decided it was better to be on the ground wishing I was in the sky than being in the sky wishing I was on the ground and so I landed on the beach.&lt;/p&gt;
&lt;p&gt;The learning points of this flight are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the seat depth of my harness has made flying a lot more comfortable, at least for shorter flights. I guess I will see how comfortable it is during longer flights. &lt;/li&gt;
&lt;li&gt;The addition of a stir-up makes getting into the harness much easier. All I have to do now is stand up on the stir-up and I&amp;#39;m in the seat. I&amp;#39;m still not used to staying on the stir-up during flight though so I will have to work out what to do with that, especially during turns.&lt;/li&gt;
&lt;li&gt;I really should start practising my asymmetrical launches so that I can use those during high wind launch situations to reduce the pressures on the glider and myself during the initial part of the launch.&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>PG2 - Christmas holiday antics</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-01-21_PG2-Christmas-holiday-antics.html"/>
            <updated>2014-01-21T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-01-21_PG2-Christmas-holiday-antics.html</id>
            <content type="html">&lt;p&gt;During the Christmas holidays a few weeks ago I was planning to get lots of flying done, after all I had two weeks off and the weather had been amazing while I was in the office so what else could be the case? Unfortunately it turned out that the weather gods had other plans and provided generous helpings of wind and rain. That meant I only managed to fly on two different days. &lt;/p&gt;
&lt;p&gt;However that doesn&amp;#39;t mean that the Christmas holidays were lacking paragliding activities. You see my new &lt;a href=&quot;http://www.korteldesign.com/spip/?Karma-II-231&quot;&gt;harness&lt;/a&gt; arrived just before Christmas. It was ordered three or so months ago but it was completely worth the wait. The build quality is very high and the harness felt comfortable straight away. Mind you there is still some set up to be done. There are a lot of different straps on this harness which subtly change the position and shape of the harness. I suspect it will be a while before I find all the right settings.
The biggest difference so far compared to the school harnesses is that it feels like the harness reacts more to changes in the glider, which at the moment is unsettling but I guess I&amp;#39;ll get used to it. And the second difference is that the harness is harder to get into.   &lt;/p&gt;
&lt;p&gt;Given that I was already spending money I figured I should spend some more ... Actually it was more like there were a few other things that were either &lt;a href=&quot;http://en.wikipedia.org/wiki/Altimeter&quot;&gt;legally required&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Parachute&quot;&gt;very sensible&lt;/a&gt; to have. And so I also bought a &lt;a href=&quot;http://www.brauniger.com/en/products/flight-instruments/iq-basic-gps/overview.html&quot;&gt;vario&lt;/a&gt; and a &lt;a href=&quot;http://gingliders.com/rescue-systems/yeti-light-rescue/&quot;&gt;reserve&lt;/a&gt;. The combination was not cheap but I do feel a lot safer now that I have a way to tell how high I am and a way to come down in case everything goes to custard.&lt;/p&gt;
&lt;p&gt;Finally I also did my PG2 theory exam and scored 97% which I was pretty stoked with. The minimum score to pass is 90% so I managed to get that in the bag pretty easily. There is one more theoretical exam to do which is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Visual_flight_rules&quot;&gt;VFR&lt;/a&gt; exam. For that I am trying to learn all the abbreviations at the moment which might take a bit of time.&lt;/p&gt;
&lt;p&gt;All in all the Christmas holidays turned out to have a decent amount of paragliding related activities.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock configuration - Build server integration</title>
            <link href="http://www.petrikvandervelde.nl/posts/2014-01-13_Integrating-Sherlock-with-a-build-server.html"/>
            <updated>2014-01-13T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2014-01-13_Integrating-Sherlock-with-a-build-server.html</id>
            <content type="html">&lt;p&gt;Once the configuration of &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; is complete the last step needed to make use of automatic regression testing is to integrate with a build server. In this post I will explain which steps need to be taken to integrate Sherlock with a build server. Examples will be given for &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt;, which is used at my work, and &lt;a href=&quot;http://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt;, which I use personally. &lt;/p&gt;
&lt;p&gt;In order to integrate with a build server you will need to: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create at least one test configuration&lt;/li&gt;
&lt;li&gt;Write the build scripts necessary to register a test, wait for the completion of the test and process the results.&lt;/li&gt;
&lt;li&gt;Set up a job on the build server to execute the test.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;test-configurations&quot;&gt;Test configurations&lt;/h3&gt;
&lt;p&gt;In order to execute a test the first thing you need to decide on is the test configuration which will be executed. In Sherlock the test configuration is described by a XML file similar to the following gist: &lt;/p&gt;
&lt;script src='https://gist.github.com/8346703.js'&gt;&lt;/script&gt;

&lt;p&gt;In this configuration file replace all instances of &lt;code&gt;${SOME_TEXT}$&lt;/code&gt; with the appropriate information. Note that some configuration settings should be templated so that those values can be supplied by the build system, e.g. the application version number:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide an application name and version for use in the test report.&lt;/li&gt;
&lt;li&gt;Provide a compact description. This will be used as the title of the test report&lt;/li&gt;
&lt;li&gt;Provide each environment with a name. It doesn&amp;#39;t matter what that name is as long as it is consistently used throughout the configuration file. All test steps which should be executed on the same environment should be linked to the same environment name. Note that while it is possible to request multiple environments to be started in a test, it is not possible to synchronize those environments. In other words each environment will exit as soon as it completes the test steps assigned to it, no environment will wait for other environments to complete their work.&lt;/li&gt;
&lt;li&gt;For each test step that needs to be executed provide the order (integer number starting at 0, incrementing for each step), the name of the environment in which the step should be executed, the failure mode, either Stop or Continue and the correct file paths. Note that the test steps use the following definitions for their file paths:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;msi:&lt;/strong&gt; &lt;code&gt;file&lt;/code&gt; is the absolute path to the MSI file as on the machine that is used to register the test (i.e. the origin).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-copy:&lt;/strong&gt; &lt;code&gt;destination&lt;/code&gt; is the absolute path to the directory that will hold all the x-copy results on the test environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-copy:&lt;/strong&gt; &lt;code&gt;base&lt;/code&gt; is the absolute path to the directory that holds the files / directories to be x-copied on the origin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-copy:&lt;/strong&gt; &lt;code&gt;paths&lt;/code&gt; contains the absolute paths to the files / directories that should be x-copied. It is expected that these all reside in the &lt;code&gt;base&lt;/code&gt; directory at some level.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;script:&lt;/strong&gt; &lt;code&gt;file&lt;/code&gt; is the absolute path to the script file on the origin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;console:&lt;/strong&gt; &lt;code&gt;exe&lt;/code&gt; is the absolute path to the executable that should be executed on the test environment. Note that the path is also pointed to the test environment. Hence the &lt;code&gt;CONSOLE&lt;/code&gt; test step is the only test step that doesn&amp;#39;t copy files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All test steps:&lt;/strong&gt; All files and directories that should be included in the report are absolute paths on the test environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;notification:&lt;/strong&gt; The absolute path where the final report should be placed. This path should be accessible to both Sherlock (the master controller) and the application that will process the test results.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It makes sense to always copy back any logs that are written during the test. If you don&amp;#39;t need them for test failure diagnosis then it is easy to delete them later, however you can&amp;#39;t copy them from the test environment after the test has completed because the test environment will be reset to its original state upon shut down. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need tests to run in different environments or with different test steps then you will need to create a configuration file for each environment / set of test steps.  &lt;/p&gt;
&lt;h3 id=&quot;build-scripts&quot;&gt;Build scripts&lt;/h3&gt;
&lt;p&gt;The easiest way to execute the test from a build server is to create a set of build scripts that can do the work for you. In this example I will be using MsBuild as the scripting language.&lt;/p&gt;
&lt;p&gt;In order to create the configuration file from the template it is necessary to replace all the templated configuration settings with their current values. The following gist shows an inline MsBuild task that does exactly that:&lt;/p&gt;
&lt;script src='https://gist.github.com/8277812.js?file=TemplateFile.xml'&gt;&lt;/script&gt;

&lt;p&gt;In order to use this task create an &lt;code&gt;ItemGroup&lt;/code&gt; with the identifiers of the settings and their replacement values. For example:&lt;/p&gt;
&lt;script src='https://gist.github.com/8277812.js?file=HowToUseTemplateFile.xml'&gt;&lt;/script&gt;

&lt;p&gt;If this example is used on the following template file:&lt;/p&gt;
&lt;script src='https://gist.github.com/8277812.js?file=BeforeReplacement.xml'&gt;&lt;/script&gt;

&lt;p&gt;Then the outcome is the following output file:&lt;/p&gt;
&lt;script src='https://gist.github.com/8277812.js?file=AfterReplacement.xml'&gt;&lt;/script&gt;

&lt;p&gt;The next step will be to create a build script that can register the test with the Sherlock system. This can either be done with a call to the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/x8zx72cd.aspx&quot;&gt;exec&lt;/a&gt; task or with the following inline MsBuild task:&lt;/p&gt;
&lt;script src='https://gist.github.com/8346876.js'&gt;&lt;/script&gt;

&lt;p&gt;The next step is a little tricky in that it is now necessary to wait for Sherlock to execute the test and create the test report. The tricky bit due to the fact that Sherlock will only execute the tests when a suitable test environment is available. That means that tests could be executed almost immediately if an environment is directly available, or not for a long time if all environments are busy. On top of that MsBuild does not have the ability to watch specific files. The following inline task allows you to wait for certain files to be created. Note that you need to provide a time-out which determines how long this task will wait for the report files. How long this time-out should be depends on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How long it takes for the tests to execute.&lt;/li&gt;
&lt;li&gt;How many tests will be executed on the same test environments. Tests executing on different test environments can be run in parallel provided the hardware will stand up to it.&lt;/li&gt;
&lt;li&gt;How many other tests may potentially be executing at the same time.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src='https://gist.github.com/8346893.js'&gt;&lt;/script&gt;

&lt;p&gt;Finally the report files need to be checked for success or failure. For each test Sherlock produces a HTML and an XML report. The easiest way to find the outcome of a test is to parse the XML report and search for the &lt;code&gt;result&lt;/code&gt; element. The value of this element will either be &lt;code&gt;Passed&lt;/code&gt; or &lt;code&gt;Failed&lt;/code&gt;. The following inline task will accomplish this goal:&lt;/p&gt;
&lt;script src='https://gist.github.com/8346900.js'&gt;&lt;/script&gt;

&lt;h3 id=&quot;build-jobs&quot;&gt;Build jobs&lt;/h3&gt;
&lt;p&gt;The final task is to setup one or more build jobs for the build server to execute. While you can combine the testing steps with the build steps it is in general advisable to have a separate job for the testing steps. The main reason for that is that the the testing steps can take quite a while to execute, ranging from several minutes to hours, which slows down the continuous integration feedback cycle considerably. Based on the idea that the tests should be contained in their own build job the following set-up is proposed. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define three different build jobs for the build, test and deploy stages of the process. This means that each job will be responsible for a specific task. Individual jobs will be use the artefacts produced by the other jobs.&lt;/li&gt;
&lt;li&gt;Set up dependencies between the different builds where required. For instance the test job will depend on the artefacts produced by the build job.&lt;/li&gt;
&lt;li&gt;The build job can be run both as continuous integration build, i.e. execute the build job each time a commit to the source control system is detected, and as pre-requisite to the test job.&lt;/li&gt;
&lt;li&gt;Similarly the test job could be run nightly to provide relatively quick feedback on regression problems while also acting as pre-requisite to the deploy job. &lt;/li&gt;
&lt;li&gt;If the version number includes either the build counter of the build job or the revision number of the source control commit then special care needs to be taken for the test and deploy jobs in order to ensure that they get the same numbers as the build job did.&lt;/li&gt;
&lt;li&gt;In a similar fashion it will be necessary to control the version control settings so that all builds pull in the same revision. One solution would be to store the revision index in the first job in the chain and then transfer that to the other jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the two build systems I have specifically worked with the following additional notes can be made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;In addition to the three standard jobs you will probably need a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin&quot;&gt;Build flow&lt;/a&gt; job to trigger the different standard jobs in the right order. This has to be done because at the moment it does not seem possible in Jenkins to trigger pre-requisite builds without having the downstream project taking up one of the build executors. The build flow jobs live outside the actual build executors which makes it possible to optimize the use of the executors.&lt;/li&gt;
&lt;li&gt;In order to deal with the build number problems as specified above the simplest way is to write the number to a file in the upstream job, archive that and then pull it out in the downstream jobs. The same goes for the version control information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Downstream jobs have both a snapshot dependency and an artefact dependency on the upstream job. The &lt;a href=&quot;http://confluence.jetbrains.com/display/TCD8/Configuring+Dependencies&quot;&gt;snapshot dependency&lt;/a&gt; takes care of the synchronization of the version control revision. Note that you should create different VCS roots for each project, otherwise the projects all share a single check-out directory. By sharing a single directory it is possible that upon starting the second job the directory is cleaned which will likely remove the artefacts from the first job. &lt;/li&gt;
&lt;li&gt;The build number can be copied easily by &lt;a href=&quot;http://confluence.jetbrains.com/display/TCD8/Configuring+General+Settings#ConfiguringGeneralSettings-BuildNumberFormat&quot;&gt;synchronizing&lt;/a&gt; the build numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock release - V0.4.8.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-27_Sherlock-Release-V0480.html"/>
            <updated>2013-12-27T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-27_Sherlock-Release-V0480.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases/tag/v0.4.8.0&quot;&gt;V0.4.8.0&lt;/a&gt; of the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; regression testing application has been released. This release provides the following issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/13&quot;&gt;#13&lt;/a&gt; - Provide setup verification&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/14&quot;&gt;#14&lt;/a&gt; - Add license and readme to all downloadable files&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/15&quot;&gt;#15&lt;/a&gt; - Include test purpose in final test report&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/22&quot;&gt;#22&lt;/a&gt; - Add NuGet symbols package for easy upload to a symbol server&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/23&quot;&gt;#23&lt;/a&gt; - OutOfMemoryException in Sherlock.Service.Master&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/24&quot;&gt;#24&lt;/a&gt; - Hyper-V: If a virtual machine is running when a new test is started terminate the current run&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/26&quot;&gt;#26&lt;/a&gt; - Hyper-V: Handle state change result code&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock configuration - Verification</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-24_Setting-up-Sherlock-verification.html"/>
            <updated>2013-12-24T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-24_Setting-up-Sherlock-verification.html</id>
            <content type="html">&lt;p&gt;After the configuration of the &lt;a href=&quot;/posts/2013-12-10_Setting-up-Sherlock-serverside.html&quot;&gt;host machine&lt;/a&gt; and the &lt;a href=&quot;/posts/2013-12-11_Setting-up-Sherlock-virtualmachines.html&quot;&gt;virtual machines&lt;/a&gt; the final step in the configuration of Sherlock is to verify that everything is configured correctly. This can be done by using the verification package that comes with each &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases&quot;&gt;release&lt;/a&gt; of Sherlock. In order to use the verification package take the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unpack the &lt;strong&gt;verification.zip&lt;/strong&gt; package to a directory somewhere (e.g. &lt;code&gt;c:\temp\sherlock&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Update the configuration file &lt;code&gt;Sherlock.VerificationConfiguration.msbuild&lt;/code&gt; with the following settings:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ConfigurationReportDirectory:&lt;/strong&gt; The directory where you want the final report to be placed. Note that both the user who requests the test and the user which is used to run the Sherlock services need to have access to this directory. The &lt;code&gt;report&lt;/code&gt; directory that was created on the &lt;a href=&quot;/posts/2013-12-10_Setting-up-Sherlock-serverside.html&quot;&gt;host&lt;/a&gt; machine&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConfigurationServerUrl:&lt;/strong&gt; The URL of the web service, e.g. &lt;code&gt;http:\\myhostmachine\sherlock.api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConfigurationOperatingSystem:&lt;/strong&gt; The operating system name that you want to test with. This needs to match one of the operating systems that has been registered with the management website and which is installed on at least one of your test environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConfigurationOperatingSystemServicePack:&lt;/strong&gt; Can be left empty if the operating system has no service pack. If the operating system has a service pack then it needs to match the service pack name of the operating system as registered with the management web site.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConfigurationOperatingSystemCulture:&lt;/strong&gt; The &lt;a href=&quot;http://en.wikipedia.org/wiki/IETF_language_tag&quot;&gt;culture&lt;/a&gt; as defined for the registered operating system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConfigurationOperatingSystemPointerSize:&lt;/strong&gt; The &amp;#39;bitness&amp;#39; or pointer size for the operating system, either 32 or 64 bits. Should again match the value that was provided when the operating system was registered.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConfigurationRemotePcWorkingPath:&lt;/strong&gt; A path where the test files will be placed on the test environment, e.g. &lt;code&gt;c:\temp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConfigurationSherlockConsoleDirectory:&lt;/strong&gt; The directory where the console application is installed, this may be a UNC path or a normal directory, e.g. &lt;code&gt;\\MyHostMachine\console&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Execute the &lt;code&gt;Sherlock.ExecuteVerificationTests.msbuild&lt;/code&gt; script. This script will prepare the files to be send across (a test application and some test scripts), start the console application, register the test and then wait for the reports to be produced. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the reports will come back with some errors. The verification was designed this way on purpose to make it possible to test the error handling. In the end there should be three reports, one for each known test configuration version, i.e. v1.0, v1.1 and v1.2. The reports should show the following errors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The script execution that executes &lt;code&gt;c:\temp\Sherlock.Verification.Console.exe&lt;/code&gt; with the &lt;code&gt;-f&lt;/code&gt; command line argument. The &lt;code&gt;-f&lt;/code&gt; parameter indicates that the process should &amp;#39;fail&amp;#39; and exit with an exit code of 1.&lt;/li&gt;
&lt;li&gt;The script execution for &lt;code&gt;c:\temp\Sherlock.Verfication.Console.exe&lt;/code&gt; with parameter &lt;code&gt;-c&lt;/code&gt;. The &lt;code&gt;-c&lt;/code&gt; parameter indicates that the process should exit with an unhandled exception. The exit code for the process should be -532462766.&lt;/li&gt;
&lt;li&gt;The application execution &lt;code&gt;c:\temp\Sherlock.Verification.Console.exe&lt;/code&gt; with the &lt;code&gt;-f&lt;/code&gt; command line argument. &lt;/li&gt;
&lt;li&gt;The application execution for &lt;code&gt;c:\temp\Sherlock.Verfication.Console.exe&lt;/code&gt; with parameter &lt;code&gt;-c&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h3&gt;
&lt;p&gt;If there are any problems during the verification then the first thing to look at are the debug logs which are written by the different applications. The logs are generally found in &lt;code&gt;c:\ProgramData\Sherlock\&amp;lt;APP_NAME&amp;gt;\&amp;lt;VERSION&amp;gt;\logs&lt;/code&gt;. Notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If there is not enough information in the logs then you can change the log level in the application configuration file under the &lt;code&gt;DefaultLogLevel&lt;/code&gt; configuration option. The available levels are (from most verbose to least verbose):&lt;ul&gt;
&lt;li&gt;Trace &lt;/li&gt;
&lt;li&gt;Debug&lt;/li&gt;
&lt;li&gt;Info&lt;/li&gt;
&lt;li&gt;Warn&lt;/li&gt;
&lt;li&gt;Error&lt;/li&gt;
&lt;li&gt;Fatal&lt;/li&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The applications running in the test environment also log but those logs may be removed if the test environment is a virtual machine. However version 1.2 of the test configuration file has the possibly to copy the logs back to the host machine for inclusion into the test report. For this to work set the &lt;code&gt;includesystemlog&lt;/code&gt; attribute of the &lt;code&gt;includeinreport&lt;/code&gt; element to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some standard problems that may occur are mentioned below.&lt;/p&gt;
&lt;h4 id=&quot;console-and-web-service&quot;&gt;Console and web service&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If the console application fails to connect to the web service because it cannot find the web service then verify that the web service can be reached. The two main problems that could be the root cause of this are either the web service is not running or the user which started the console application has no access rights to the web service.&lt;/li&gt;
&lt;li&gt;If the console application crashes due to a URL problem (see the log file) then it is most likely that you put a partial URL, e.g. &lt;code&gt;mycoolserver\sherlock.api&lt;/code&gt; instead of &lt;code&gt;http://mycoolserver/sherlock.api&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the console successfully manages to go through nearly all the test registration steps but fails on the transfer of the test files then there is quite likely a problem with the web service permissions to write to the &lt;code&gt;App_Data&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;If the web service fails on the first call then there is quite likely a problem with the database connection. This is most likley either a problem with the connection string or a problem with the permissions. In case of a permission issue check if the user which is running the web service can access the stored procedures in the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;update-service&quot;&gt;Update service&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If the update service is unable to verify the update packages then it is not able to access the public key file. Make sure the configuration file points to the public key file and that this file is reachable by the service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;master-controller&quot;&gt;Master controller&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If the master controller fails to connect to the database this could point to either a problem with the connection string or a problem with the permissions. In case of a permissions problem again check that the user running the master controller can access the stored procedures in the database.&lt;/li&gt;
&lt;li&gt;If the master controller is unable to start a virtual machine then the &lt;em&gt;SherlockUser&lt;/em&gt; may not have &lt;a href=&quot;http://blogs.msdn.com/b/virtual_pc_guy/archive/2008/01/17/allowing-non-administrators-to-control-hyper-v.aspx&quot;&gt;permissions&lt;/a&gt; to start the virtual machines. The log will show this as an error in the environment loading. Probably a security exception.&lt;/li&gt;
&lt;li&gt;If the controller is blocked by the firewall, or the firewall on the test environment is blocking, then there will be no communication between the test environment and the host. The log shows this through the fact that the host will wait an excessive amount of time for the remote &amp;#39;endpoint&amp;#39; to connect. A normal start up takes around 2 minutes for a test environment start, operating system load and Sherlock load.&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>nAnicitus release - V0.1.4.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-22_nAnicitus-Release-V0140.html"/>
            <updated>2013-12-22T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-22_nAnicitus-Release-V0140.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/releases/tag/V0.1.4.0&quot;&gt;V0.1.4.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nanicitus.html&quot;&gt;nAnicitus&lt;/a&gt; symbol store application has been released. This release fixes issue &lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/issues/1&quot;&gt;#1&lt;/a&gt;. If a package is locked by the operating system, e.g. because the file write has not completed yet, then nAnicitus will try to load the package 3 times, waiting 5 seconds between each try. On top of that if the loading of a package fails then the nAnicitus will retry loading the package 3 times before giving up.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Nuclei release - V0.7.1.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-21_Nuclei-Release-V0710.html"/>
            <updated>2013-12-21T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-21_Nuclei-Release-V0710.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/releases/tag/V0.7.1.0&quot;&gt;V0.7.1.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nuclei.html&quot;&gt;Nuclei&lt;/a&gt; library has been released. This release fixes issue &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/issues/9&quot;&gt;#9&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock configuration - Virtual machines</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-11_Setting-up-Sherlock-virtualmachines.html"/>
            <updated>2013-12-11T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-11_Setting-up-Sherlock-virtualmachines.html</id>
            <content type="html">&lt;p&gt;After &lt;a href=&quot;/posts/2013-12-10_Setting-up-Sherlock-serverside.html&quot;&gt;setting up the host machine&lt;/a&gt; the next step in the &lt;a href=&quot;/posts/2013-12-04_Regression-testing-with-Sherlock.html&quot;&gt;configuration&lt;/a&gt; of Sherlock is to set up one or more virtual machines. Each virtual machine will have the following applications installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The update service which handles the installation of the latest available Sherlock binaries. &lt;/li&gt;
&lt;li&gt;The executor service which handles the communication with the master controller, handles the download and upload of test files and test reports and controls the test execution. &lt;/li&gt;
&lt;li&gt;The application which executes the test steps. This has been separated from the service so that: &lt;ul&gt;
&lt;li&gt;It is possible to run the application on the desktop while the executor service is running as a Windows service.&lt;/li&gt;
&lt;li&gt;Any fatal errors in the test application don&amp;#39;t affect the service, thereby maintaining communication with the master controller, and thus allowing error reports to be send.&lt;/li&gt;
&lt;li&gt;It is possible to run multiple applications under different accounts (planned in future releases).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The configuration process for a virtual machine consists of the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new virtual machine and install the operating system&lt;/li&gt;
&lt;li&gt;Configure the operating system on the virtual machine&lt;/li&gt;
&lt;li&gt;Install and configure the Sherlock applications on the virtual machine&lt;/li&gt;
&lt;li&gt;Store information about the virtual machine in the host database&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;preparing-the-virtual-machine&quot;&gt;Preparing the virtual machine&lt;/h3&gt;
&lt;p&gt;The first step is to create a &lt;a href=&quot;http://technet.microsoft.com/en-us/library/cc772480.aspx&quot;&gt;new virtual machine&lt;/a&gt; and install the operating system. This should be straight forward but there a few things to look out for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The operating system must (currently) support &lt;a href=&quot;http://en.wikipedia.org/wiki/.NET_Framework_version_history#.NET_Framework_4.5&quot;&gt;.NET 4.5&lt;/a&gt; because that is what Sherlock is needs to run on.&lt;/li&gt;
&lt;li&gt;The network for the virtual machine must be set up so that it can at the very least see the host machine and the other virtual machines stored on the same host machine.&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Windows networks can &lt;a href=&quot;http://www.petri.co.il/working-with-domain-member-virtual-machines-and-snapshots.htm&quot;&gt;deny access&lt;/a&gt; to the test virtual machines after being used for a while (usually 30 days) due to the fact that the test machine is reset after each test, thereby not allowing it to handle the renewal of network identification keys correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;preparing-the-operating-system&quot;&gt;Preparing the operating system&lt;/h3&gt;
&lt;p&gt;After the creation of the virtual machine and the installation of the operating system it is necessary to configure the operating system. Some of the changes are necessary for Sherlock to function while others are necessary only from a test perspective.&lt;/p&gt;
&lt;p&gt;Lets first start with the changes required for Sherlock to function. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If .NET 4.5 is not already installed, then install it. Without it Sherlock won&amp;#39;t run at all.&lt;/li&gt;
&lt;li&gt;Create a new user that will be used to execute the tests. This user needs to be an administrator so that the execution of an MSI install can succeed without the need for elevation (which is &lt;a href=&quot;http://stackoverflow.com/questions/5098121/how-can-i-get-elevated-permissions-uac-via-impersonation-under-a-non-interacti&quot;&gt;a bit tricky&lt;/a&gt; from an application). The user can be either a machine local administrator or a domain user  which is granted administration rights on the machine.&lt;ul&gt;
&lt;li&gt;Note that there might a difference between a domain user with administrative rights on the computer and a local administrator. If you turn UAC off then in general a local administrator is running all applications elevated while the applications started by the domain user run with no elevation only to be silently elevated if requested to do so. Unfortunately this means that the domain user will not be able to run a silent install from a command line unless that command line is explicitly elevated (which is not possible from an application).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disable User Access Control (UAC) so that Sherlock can execute MSI installations. &lt;strong&gt;Note:&lt;/strong&gt; In some cases corporate network controls and/or group policies override local settings. In those cases talk to the local IT people regarding UAC. Also note that on Windows 8 it is not possible to turn off the UAC by moving the &amp;#39;UAC slider&amp;#39; all the way down. This is because Metro applications require some form of UAC to exist in order for them to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally before installing Sherlock a few tweaks should be made to the operating system configuration so that the automated tests can proceed. Note that for all the following changes there may be group policies in place put there by your local IT service. It may be necessary to talk to the IT people about the settings you want to change and the &lt;a href=&quot;http://www.brianbondy.com/blog/id/100/&quot;&gt;reason&lt;/a&gt; you need to change those settings.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interactive user:&lt;/strong&gt; If you need to run interactive tests, e.g. UI tests, then you need to make sure a user is logged in. Use &lt;a href=&quot;http://technet.microsoft.com/en-us/sysinternals/bb963905.aspx&quot;&gt;Autologon&lt;/a&gt; to automatically log your user in when the computer starts while still maintaining password security.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows 8 switch to desktop:&lt;/strong&gt; If you are on Windows 8 you need to make sure that the desktop is &lt;a href=&quot;http://www.7tutorials.com/how-boot-desktop-windows-8-skip-start-screen&quot;&gt;available&lt;/a&gt; for interactive applications to execute on.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Screen saver:&lt;/strong&gt; In order to prevent any interactive tests from failing due to a &lt;a href=&quot;http://windows.microsoft.com/en-nz/windows-vista/turn-your-screen-saver-on-or-off&quot;&gt;screensaver&lt;/a&gt; or the &lt;a href=&quot;http://answers.microsoft.com/en-us/windows/forum/windows_7-security/disable-automatic-lock-with-windows-7/daef8f0a-810f-46e8-9420-3c32c4bd6479&quot;&gt;automatic locking of the desktop&lt;/a&gt; both those features need to be turned off. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows error reporting:&lt;/strong&gt; Any tests that run on the desktop may hang eternally if the application under tests fails and displays the Windows Error Reporting (WER) dialog. In order to prevent this from happening &lt;a href=&quot;http://4sysops.com/archives/how-to-disable-windows-error-reporting/&quot;&gt;WER should be disabled&lt;/a&gt;. The most efficient way of doing this is to use the group policy controls to disable the following elements:&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;Computer Configuration\Administrative Templates\System\Internet Communication Management\Internet Communication settings&lt;/code&gt; enable the setting: &lt;code&gt;Turn off Windows Error Reporting&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;Computer Configuration\Administrative Templates\Windows Components\Windows Error Reporting&lt;/code&gt; enable the settings &lt;code&gt;Disable Windows error reporting&lt;/code&gt; and &lt;code&gt;Prevent display of the user interface for critical errors&lt;/code&gt;, and disable the setting &lt;code&gt;Display error notification&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automatic updates:&lt;/strong&gt; Automatic updates can be disabled because they will never be deployed due to the fact that the machine is reset after each test.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;configuring-sherlock&quot;&gt;Configuring Sherlock&lt;/h3&gt;
&lt;p&gt;Once the operating system is configured &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; can be installed and configured. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unzip the &lt;strong&gt;service.zip&lt;/strong&gt; package into the &lt;code&gt;c:\sherlock&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Copy the XML file containing the public key used to sign the manifests to the virtual machine and place it in the &lt;code&gt;c:\sherlock&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Open the configuration file (&lt;code&gt;Sherlock.Service.exe.config&lt;/code&gt;) and update the following settings:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ApplicationName:&lt;/strong&gt; The name of the application for which updates should be tracked, in this case that is: &lt;code&gt;Sherlock.Service.Executor.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UpdateManifestUri:&lt;/strong&gt; The URL of the manifest file, in this case: &lt;code&gt;http:\\myhostmachine\appupdate\executorservice.manifest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ManifestPublicKeyFile:&lt;/strong&gt; The path to the XML file containing the public key section of the manifest signing key, e.g. &lt;code&gt;C:\sherlock\manifestsigningkey.public.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set the update service to start automatically when the computer starts. This can be done as an actual service (in case no interactive tests will be executed) or by automatically starting the application when the user logs on to windows (in case interactive tests need to be executed).&lt;/li&gt;
&lt;li&gt;The last step is to let the executor controller through the firewall. For this create an inbound rule that allows &lt;code&gt;c:\ProgramData\Sherlock\Sherlock.Service.Executor\{VERSION}\Sherlock.Service.Executor.exe&lt;/code&gt; to connect to all types of protocols. Normally only Domain and private networks should be sufficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;
&lt;p&gt;Once the operating system and Sherlock have been configured it is sensible to test the configurations to make sure it all works. In order to do this take the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restart the virtual machine. Once the machine starts up it should (depending on your configuration)&lt;ul&gt;
&lt;li&gt;Automatically log on the test user&lt;/li&gt;
&lt;li&gt;On windows 8 switch to the desktop&lt;/li&gt;
&lt;li&gt;Start the Sherlock update service. The service should download the latest version of the executor controller and start it. You can verify this by looking at the logs which can be found in &lt;code&gt;c:\programdata\sherlock\sherlock.service\{VERSION}\logs&lt;/code&gt; and &lt;code&gt;c:\programdata\sherlock\sherlock.service.executor\{VERSION}\logs&lt;/code&gt; for the update service and the executor controller respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;After both applications have started stop them both by stopping the update service (&lt;code&gt;Sherlock.Service&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Once the applications have been stopped remove the data from the directory &lt;code&gt;c:\ProgramData\Sherlock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Shut down the machine.&lt;/li&gt;
&lt;li&gt;Take a &lt;a href=&quot;http://blogs.msdn.com/b/virtual_pc_guy/archive/2008/01/16/managing-snapshots-with-hyper-v.aspx&quot;&gt;snapshot&lt;/a&gt; of the current state of the virtual machine and give it a sensible name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;host-configuration&quot;&gt;Host configuration&lt;/h3&gt;
&lt;p&gt;Finally the last step in the configuration of a new test environment is to register the environment with Sherlock through the management website.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock configuration - Server side</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-10_Setting-up-Sherlock-serverside.html"/>
            <updated>2013-12-10T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-10_Setting-up-Sherlock-serverside.html</id>
            <content type="html">&lt;p&gt;In this post I will explain how to configure the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; host services, which handle test registration and selection and control of the test environments for a test. The set-up follows the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preparing the host machine which includes installation of the OS and the required services.&lt;/li&gt;
&lt;li&gt;Installation of database.&lt;/li&gt;
&lt;li&gt;Installation of the web parts.&lt;/li&gt;
&lt;li&gt;Creation of the update files and the update manifests.&lt;/li&gt;
&lt;li&gt;Installation of the services.&lt;/li&gt;
&lt;li&gt;Configuration of the firewall.&lt;/li&gt;
&lt;li&gt;Verification of the configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;preparing-the-host-machine&quot;&gt;Preparing the host machine&lt;/h3&gt;
&lt;p&gt;The first step in the configuration of the host services is to prepare the machine from which the Hyper-V service will be running. Note that Sherlock does not require that all services run on this machine but for the purposes of this post I will assume that this is the case. The configuration of the host machine consists of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the host operating system on the machine. Both the machine and the operating system need to &lt;a href=&quot;http://en.wikipedia.org/wiki/Hyper-V#System_requirements_and_specifications&quot;&gt;support Hyper-V&lt;/a&gt;. On top of that for the very least the master controller service has to be installed on the host machine, which means it is not possible to install the core Hyper-V version of Windows.&lt;/li&gt;
&lt;li&gt;Create or associate a user which you will use to run the Sherlock services. It is strongly recommended to not run the Sherlock services as local administrator for security reasons. It is more suitable to provide a separate user to run the services. Note that this user will need permissions to run services, but doesn&amp;#39;t need installation permissions etc. For the remainder of this post lets call this user the &lt;em&gt;SherlockUser&lt;/em&gt;. &lt;em&gt;Note:&lt;/em&gt; If you have a specific user that is used for your build server then it makes sense to use that user, although that is not required.&lt;/li&gt;
&lt;li&gt;Install the &lt;a href=&quot;http://technet.microsoft.com/en-us/library/hh846766.aspx&quot;&gt;Hyper-V role&lt;/a&gt; on the host machine.&lt;/li&gt;
&lt;li&gt;Grant the &lt;em&gt;SherlockUser&lt;/em&gt; &lt;a href=&quot;http://blogs.msdn.com/b/virtual_pc_guy/archive/2008/01/17/allowing-non-administrators-to-control-hyper-v.aspx&quot;&gt;permissions&lt;/a&gt; to start, stop and reset Hyper-V virtual machines.&lt;/li&gt;
&lt;li&gt;Install the &lt;a href=&quot;http://www.iis.net/learn/get-started/whats-new-in-iis-8/installing-iis-8-on-windows-server-2012&quot;&gt;IIS role&lt;/a&gt; on the host machine. &lt;em&gt;Note:&lt;/em&gt; that in theory (i.e. this has not been tested) IIS can be installed on a different machine than the host machine as long as it will be able to reach the database. The IIS install will need to have the following parts installed as a minimum:&lt;ul&gt;
&lt;li&gt;ASP .NET 4.5&lt;/li&gt;
&lt;li&gt;Basic authentication&lt;/li&gt;
&lt;li&gt;Windows Authentication&lt;/li&gt;
&lt;li&gt;Management tools&lt;/li&gt;
&lt;li&gt;Http logging and tracing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&quot;http://www.microsoft.com/web/platform/database.aspx&quot;&gt;MSSQL Express 2012&lt;/a&gt; on the host machine. &lt;em&gt;Note:&lt;/em&gt; As with IIS it is again possible to install the database on any machine as long as both IIS and the Hyper-V host can connect to it.&lt;/li&gt;
&lt;li&gt;Create a directory that will hold all the files related to Sherlock, e.g. &lt;code&gt;c:\testing&lt;/code&gt;. In that directory create the following sub-directories:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appupdate&lt;/code&gt; - Contains the application update files and manifests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console&lt;/code&gt; - Contains the binary files for the console application which is used by the user to register a test.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt; - Contains the binaries for the windows service that will run the controller application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web.api&lt;/code&gt; - Contains the binaries for the web service that interacts with the database on test registration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web.intranet&lt;/code&gt; - Contains the binaries for the management web site.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reports&lt;/code&gt; - The location where tests can place their generated reports. Note that Sherlock allows placing test reports in any location as long as the service has access to that directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;temp&lt;/code&gt; - The temporary directory used for report generation etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Share the &lt;code&gt;reports&lt;/code&gt; and &lt;code&gt;console&lt;/code&gt; directories so that they can be accessed over the network. The &lt;code&gt;console&lt;/code&gt; directory will only need read access, the &lt;code&gt;reports&lt;/code&gt; directory will need read and write access.&lt;/li&gt;
&lt;li&gt;Install the &lt;a href=&quot;https://github.com/pvandervelde/nAdoni&quot;&gt;nAdoni&lt;/a&gt; manifest signing tool. This application will be used sign the update manifest files.&lt;/li&gt;
&lt;li&gt;Generate the update keys by executing the following command line (assuming that you installed nadoni in &lt;code&gt;c:\tools\nadoni&lt;/code&gt;):&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs dos&quot;&gt;c:\tools\nadoni\keygenerator\nadoni.keygenerator.exe --private=&amp;lt;PATH_TO_PRIVATE_KEY_FILE&amp;gt; --public=&amp;lt;PATH_TO_PUBLIC_KEY_FILE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Where &lt;code&gt;&amp;lt;PATH_TO_PRIVATE_KEY_FILE&amp;gt;&lt;/code&gt; points to the XML file that will contain the private and public parts of the manifest signing key and &lt;code&gt;&amp;lt;PATH_TO_PUBLIC_KEY_FILE&amp;gt;&lt;/code&gt; points to the XML file that will contain the public part of the manifest signing key. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;database&quot;&gt;Database&lt;/h3&gt;
&lt;p&gt;The second step in the installation process is to create the Sherlock database.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unpack the &lt;em&gt;sql.zip&lt;/em&gt; file that is part of the &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases&quot;&gt;Sherlock release&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create database called &lt;code&gt;Sherlock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Apply all the SQL scripts from the &lt;em&gt;sql.zip&lt;/em&gt; file, starting at the V1 script through to the latest upgrade script &lt;em&gt;Sherlock_Upgrade_Vm_To_Vn.sql&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide permissions for the user that will be connecting to the database. You can either use the &lt;em&gt;SherlockUser&lt;/em&gt; or you can create an SQL user. Grant this user the following access:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db_datareader&lt;/li&gt;
&lt;li&gt;db_datawriter&lt;/li&gt;
&lt;li&gt;Grant access to stored procedures. This can be done via: &lt;code&gt;GRANT EXEC TO &amp;lt;STORED_PROCEDURE_NAME&amp;gt; TO &amp;lt;SQL_USER&amp;gt;&lt;/code&gt;. Given that Sherlock only accesses the database through stored procedures, there is no direct table access, there are quite a few stored procedures which means it makes sense to create a script in order to grant access to the stored procedures. The following SQL script can be used to generate an access script for the user:&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;'GRANT EXEC ON '&lt;/span&gt;+ SCHEMA_NAME(schema_id) + &lt;span class=&quot;hljs-string&quot;&gt;'.'&lt;/span&gt; + name + &lt;span class=&quot;hljs-string&quot;&gt;' TO &amp;lt;SQL_USER&amp;gt;'&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sys.procedures
&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set-up a back up for the Sherlock database. &lt;em&gt;Note:&lt;/em&gt; The test data is only useful to Sherlock and then only when tests are either running or haven&amp;#39;t been run yet. In other words there is no useful information for the user describing test results etc.. However the information describing the available test environments should be backed-up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;iis&quot;&gt;IIS&lt;/h3&gt;
&lt;p&gt;Step number three for the installation of Sherlock is to configure the web service, web page and the application update location. We&amp;#39;ll start with the application update location:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In IIS Manager create a new virtual directory under the default web site using the following settings &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Alias:&lt;/strong&gt; AppUpdate&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path:&lt;/strong&gt; &lt;code&gt;c:\testing\appupdate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connect as:&lt;/strong&gt; &lt;em&gt;SherlockUser&lt;/em&gt;. Make sure the &lt;em&gt;SherlockUser&lt;/em&gt; has read permissions for the directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allow directory browsing through the &lt;em&gt;IIS -&amp;gt; Directory Browsing&lt;/em&gt; Feature.&lt;/li&gt;
&lt;li&gt;Finally test access to this directory via a browser by going to &lt;code&gt;&amp;lt;HOST_ADDRESS&amp;gt;\AppUpdate&lt;/code&gt;. This should display the contents of the directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before configuring the web site and the web service create a new application pool with the following settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; SherlockAppPool&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.NET Framework version:&lt;/strong&gt; V4.0.30319&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Managed pipeline mode:&lt;/strong&gt; Integrated &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next project to configure is the web site that will be used to manage the testing environments. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unzip &lt;strong&gt;Sherlock.Web.Intranet.sql&lt;/strong&gt; to the &lt;code&gt;c:\testing\web.intranet&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;In IIS Manager create a new application under the default web site using the following settings:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Alias:&lt;/strong&gt; Sherlock.Intranet&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application pool:&lt;/strong&gt; SherlockAppPool&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path:&lt;/strong&gt; &lt;code&gt;c:\testing\web.intranet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connect as:&lt;/strong&gt; &lt;em&gt;SherlockUser&lt;/em&gt;. Again make sure that the &lt;em&gt;SherlockUser&lt;/em&gt; has access to the directory containing the web site binaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set the authentication for the web site to be anonymous only.&lt;/li&gt;
&lt;li&gt;Define the connection string to be as given below:&lt;/li&gt;
&lt;/ul&gt;
&lt;script src='https://gist.github.com/7866267.js'&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;Remove the following sections from the configuration file&lt;ul&gt;
&lt;li&gt;System.Web -&amp;gt; Authentication&lt;/li&gt;
&lt;li&gt;System.Web -&amp;gt; Authorization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last web project to configure is the web service that will be used to add information about the new tests to the database.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unzip &lt;strong&gt;Sherlock.Web.Api.zip&lt;/strong&gt; to the &lt;code&gt;c:\testing\web.api&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;In IIS Manager create a new application under the default web site using the following settings:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Alias:&lt;/strong&gt; Sherlock.Api&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application pool:&lt;/strong&gt; SherlockAppPool&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path:&lt;/strong&gt; &lt;code&gt;c:\testing\web.api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connect as:&lt;/strong&gt; &lt;em&gt;SherlockUser&lt;/em&gt;. Again make sure that the &lt;em&gt;SherlockUser&lt;/em&gt; has access to the directory containing the web service binaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Define the connection string to be the same as given for the management website.&lt;/li&gt;
&lt;li&gt;Set the authentication for the web site to be anonymous only. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;update-manifests-and-files&quot;&gt;Update manifests and files&lt;/h3&gt;
&lt;p&gt;The two main services for Sherlock, the master controller and the executor controller, are not directly installed on either the host machine or the test environments. The Sherlock service probes the &lt;code&gt;AppUpdate&lt;/code&gt; directory for the binaries of these services. This greatly improves the ease with which Sherlock can be upgraded given that an upgrade of Sherlock does not require any changes to the test environments.&lt;/p&gt;
&lt;p&gt;To create the necessary upgrade files for the Sherlock services it will be necessary to update the configuration file of the master controller which takes the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unzip &lt;strong&gt;Service.Master.zip&lt;/strong&gt; into a temporary directory.&lt;/li&gt;
&lt;li&gt;Update the configuration file (&lt;code&gt;Sherlock.Service.Master.exe.config&lt;/code&gt;) with the following settings:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TestDataDirectory:&lt;/strong&gt; &lt;code&gt;c:\testing\web.api\App_Data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TestReportFilesDir:&lt;/strong&gt; &lt;code&gt;c:\testing\temp&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Define the connection string to be the same as given for the management website. &lt;/li&gt;
&lt;li&gt;Repackage the binaries into a ZIP archive with the name &lt;strong&gt;Service.Master.zip&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The executor controller does not need any changes to the configuration file and can thus be left untouched.&lt;/p&gt;
&lt;p&gt;The next step is to create the manifest files that are used by the update service to determine which ZIP archive to use. In order to create the manifests the &lt;a href=&quot;https://github.com/pvandervelde/nAdoni&quot;&gt;nAdoni&lt;/a&gt; application is used. This can be done with the following command lines:&lt;/p&gt;
&lt;p&gt;For the master controller:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs dos&quot;&gt;C:\tools\nadoni\manifestbuilder\nAdoni.ManifestBuilder.exe -v=&quot;{VERSION}&quot; -n=&quot;Sherlock.Service.Master.exe&quot; -f=&quot;c:\testing\appupdate\service.master.zip&quot; -u=&quot;http://myhostmachine/appupdate/service.master.zip&quot; -k=&quot;C:\mykeydirectory\manifestsigningkey.private.xml&quot; -o=&quot;c:\testing\appupdate\masterservice.manifest&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And for the executor controller:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs dos&quot;&gt;C:\tools\nadoni\manifestbuilder\nAdoni.ManifestBuilder.exe -v=&quot;{VERSION}&quot; -n=&quot;Sherlock.Service.Executor.exe&quot; -f=&quot;c:\testing\appupdate\service.executor.zip&quot; -u=&quot;http://myhostmachine/appupdate/service.executor.zip&quot; -k=&quot;C:\mykeydirectory\manifestsigningkey.private.xml&quot; -o=&quot;c:\testing\appupdate\executorservice.manifest&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to create the manifest files is through the use of the following Msbuild script: &lt;/p&gt;
&lt;script src='https://gist.github.com/6521946.js'&gt;&lt;/script&gt;

&lt;p&gt;In this case the following changes must be made to the file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${PATH_TO_NADONI_DIRECTORY}$&lt;/code&gt; - The path to the directory in which the nAdoni binaries have been placed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${URL_TO_APP_UPDATE}$&lt;/code&gt; - The URL to the &lt;code&gt;AppUpdate&lt;/code&gt; directory, e.g. &lt;code&gt;http://myhostmachine/appupdate&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${MANIFEST_SIGNING_KEY_PATH}$&lt;/code&gt; - The path to the XML file that contains the private key information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the following properties must be specified on the command line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Version:&lt;/strong&gt; The version of Sherlock for which the manifest files are generated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;services&quot;&gt;Services&lt;/h3&gt;
&lt;p&gt;Finally on the host machine two applications need to be configured. These are the console application that will be executed by the user to register a test and the update service that will control the master controller application.&lt;/p&gt;
&lt;p&gt;To configure the console application take the following steps:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unzip the &lt;strong&gt;console.zip&lt;/strong&gt; package into the &lt;code&gt;c:\testing\console&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Open the configuration file (&lt;code&gt;Sherlock.Console.exe.config&lt;/code&gt;) and update the following settings:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WebServiceUrl:&lt;/strong&gt; Point this to the &lt;em&gt;Sherlock.Api&lt;/em&gt; site, e.g. &lt;code&gt;http://myhostmachine/sherlock.api&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Note that the console needs to be accessed from other machines, e.g.from the build server, so make sure that the directory is shared with read-rights for all users that will need access. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To configure the update service take the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unzip the &lt;strong&gt;service.zip&lt;/strong&gt; package into the &lt;code&gt;c:\testing\service&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Open the configuration file (&lt;code&gt;Sherlock.Service.exe.config&lt;/code&gt;) and update the following settings:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ApplicationName:&lt;/strong&gt; The name of the application for which updates should be tracked, in this case that is: &lt;code&gt;Sherlock.Service.Master.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UpdateManifestUri:&lt;/strong&gt; The URL of the manifest file, in this case: &lt;code&gt;http:\\myhostmachine\appupdate\masterservice.manifest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ManifestPublicKeyFile:&lt;/strong&gt; The path to the XML file containing the public key section of the manifest signing key, e.g. &lt;code&gt;C:\mykeydirectory\manifestsigningkey.public.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the application as a service by opening an elevated command line and navigating to the &lt;code&gt;c:\testing\service&lt;/code&gt; directory. Then execute the following command line:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs css&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;sherlock&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.service&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.exe&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;-username&lt;/span&gt;&lt;span class=&quot;hljs-pseudo&quot;&gt;:SherlockUser&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;-password&lt;/span&gt;&lt;span class=&quot;hljs-pseudo&quot;&gt;:SherlockPassword&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;--delayed&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;-servicename&lt;/span&gt;&lt;span class=&quot;hljs-pseudo&quot;&gt;:Sherlock&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Go to the Windows services control and start the service. After a short while this will grab the latest version of the master controller binaries, drop them in &lt;code&gt;C:\ProgramData\Sherlock\Sherlock.Service.Master&lt;/code&gt; and then start the master controller application. You can verify that all is well by checking the log files which are located in &lt;code&gt;C:\ProgramData\Sherlock\Sherlock.Service\{VERSION}\logs&lt;/code&gt; and &lt;code&gt;C:\ProgramData\Sherlock\Sherlock.Service.Master\{VERSION}\logs&lt;/code&gt; for the service and the master controller respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;firewall&quot;&gt;Firewall&lt;/h3&gt;
&lt;p&gt;The last step is to let the master controller through the firewall. For this create an inbound rule that allows &lt;code&gt;Sherlock.Service.Master.exe&lt;/code&gt; to connect to all types of protocols. Normally only Domain and private networks should be sufficient.&lt;/p&gt;
&lt;p&gt;And with all that done the host machine configuration is completed.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>PG2 - Top landings?</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-05_PG2-Top-landings.html"/>
            <updated>2013-12-05T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-05_PG2-Top-landings.html</id>
            <content type="html">&lt;p&gt;Two weeks ago the weather was once again favourable to learn more new skills on my way to my &lt;a href=&quot;/tags/PG2.html&quot;&gt;PG2 license&lt;/a&gt;. When we arrived at Maioro the wind was just enough to soar. Given that the forecast has indicated an increase in wind strength over the afternoon we decided to practise some ground handling first. After about an hour of practising reverse launches and keeping the glider stable above our heads it was time to fly. The wind was still a bit light but with a lot of scratching I still managed to get 40 - 45 minutes of flying in on my first flight, my longest flight until then.&lt;/p&gt;
&lt;p&gt;As the afternoon progressed the wind strength slowly increased and staying up became easier which resulted in another 45 minute flight.&lt;/p&gt;
&lt;p&gt;Later in the afternoon the instructor told me it was possible to get a set of short flights with some top landings in. For my first try I launched, gained some height and then turned in for the top landing and completely stuffed it up. As I started moving over to the landing spot everything accelerated and I tried to slow down and turn at the same time, which meant I was not actually doing either of those things so when I got close to the ground I was still moving at a decent speed and hence I face planted. Fortunately there was no actual damage to either me or the glider.
After recovering from the jitters for a bit I had a second attempt at top landing which took a lot longer to set up and decent but ended in a perfect touch down. The conclusion of all of this is that I need to focus more on flying the glider till the last minute, stay in the harness to maintain the weight shift and focus on the direction of flight more. Oh so much more to learn. &lt;/p&gt;
&lt;p&gt;The fifth and final flight of the day was flying back to the car park which was quite easy as I only had to fly along the ridges to maintain more than enough height to get to the car park.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Regression testing with Sherlock</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-04_Regression-testing-with-Sherlock.html"/>
            <updated>2013-12-04T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-04_Regression-testing-with-Sherlock.html</id>
            <content type="html">&lt;p&gt;Over a series of posts I hope to explain how to set up and use the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; test environment system. The idea is to follow the set up procedure I used both at home for the &lt;a href=&quot;/projects/apollo.html&quot;&gt;Apollo&lt;/a&gt; project and the proof of concept I am working on at my work place. But first lets start with a short explanation of what Sherlock is and what it does. &lt;/p&gt;
&lt;h3 id=&quot;what-is-sherlock&quot;&gt;What is Sherlock&lt;/h3&gt;
&lt;p&gt;Sherlock consists of a set of applications and services that provide test environment organisation and automatic execution of a set of tests on one or more test environments. The organisation part consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keeping track of which environments exist, which are available for testing and which are not, e.g. for maintenance reasons.&lt;/li&gt;
&lt;li&gt;What operating system is loaded onto each environment.&lt;/li&gt;
&lt;li&gt;Which applications are pre-loaded onto each environment.&lt;/li&gt;
&lt;li&gt;Relationships between virtual machines and their (physical) host machine. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The test execution part consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selection of the most suitable environment for a test based on the desired combination of operating system and available applications.&lt;/li&gt;
&lt;li&gt;Preparing of the environment for test. This includes loading test environments, i.e. waking up physical test environments through the &lt;a href=&quot;http://en.wikipedia.org/wiki/Wake-on-LAN&quot;&gt;Wake-on-LAN&lt;/a&gt; approach and starting virtual machines, and sending over the test data, e.g. installer files.&lt;/li&gt;
&lt;li&gt;Triggering test execution on the active test environment.&lt;/li&gt;
&lt;li&gt;Processing test status and test report information.&lt;/li&gt;
&lt;li&gt;Post test environment clean-up. This currently only includes resetting virtual machine disks back to the pre-test state.&lt;/li&gt;
&lt;li&gt;Accumulation of test events and generation of the final test report.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In general the Sherlock system will consist of at least one &lt;a href=&quot;http://en.wikipedia.org/wiki/Hyper-V&quot;&gt;Hyper-V&lt;/a&gt; host machine and a set of one or more Hyper-V virtual machines. In this arrangement the host machine handles the test organisation and part of the test execution, while the virtual machines serve as test environments. &lt;/p&gt;
&lt;p&gt;While it is possible for Sherlock to execute tests on physical machines it is advised to only execute on virtual machines because of the inability to reset a physical machine back to the pre-test state. Virtual machines on the other hand can easily be restored to the pre-test state through the use of snapshots.&lt;/p&gt;
&lt;h3 id=&quot;the-life-of-a-test&quot;&gt;The life of a test&lt;/h3&gt;
&lt;p&gt;When executing a test with Sherlock the following steps are present: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user creates a test configuration file which describes all requirements for the test environment, which steps should be executed and where the report should be placed.&lt;/li&gt;
&lt;li&gt;The user registers the test with Sherlock via the console application.&lt;/li&gt;
&lt;li&gt;Some time after the registration of the test completed the Sherlock host service loads test information and selects one or more suitable environments to execute the test steps on. The time between the completion of the test registration and the starting of the test execution depends on whether suitable test environments are available and how busy they are.&lt;/li&gt;
&lt;li&gt;The selected test environments are prepared for the test execution. This preparation includes activating the environment and transferring the test data for each environment (e.g. installer files etc.).&lt;/li&gt;
&lt;li&gt;Each environment executes the desired test steps and reports back on the success or failure of each test step.&lt;/li&gt;
&lt;li&gt;Once an environment has completed its test steps it will report the completion the test, upon which the host service will terminate the environment and restore it to the original state.&lt;/li&gt;
&lt;li&gt;Once all environments have completed their test steps the test is marked as completed and the test report is compiled and placed in the predetermined location.  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h3&gt;
&lt;p&gt;The first pre-requisite in the configuration is the &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases&quot;&gt;latest release&lt;/a&gt; of sherlock. A release consists of a number of ZIP packages including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;console.zip&lt;/strong&gt; - Contains the binaries and configuration files for the console application which is used to register a test.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sherlock.web.api.zip&lt;/strong&gt; - The web service that will store information about a new test in the database.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sherlock.web.intranet.zip&lt;/strong&gt; - The management web site that can be used to add or remove test environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;service.zip&lt;/strong&gt; - The windows service that is used to run the &lt;em&gt;master controller&lt;/em&gt; or the &lt;em&gt;executor controller&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;service.master.zip&lt;/strong&gt; - The master controller application which handles the scheduling of tests, loading and unloading of test environments and processing of the test reports. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;service.executor.zip&lt;/strong&gt; - The executor controller application which controls the execution of a test on a test environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sql.zip&lt;/strong&gt; - The SQL change scripts for the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second pre-requisite is the availability of a physical machine on which a Windows version with &lt;a href=&quot;http://en.wikipedia.org/wiki/Hyper-V#System_requirements_and_specifications&quot;&gt;Hyper-V&lt;/a&gt; can be installed.&lt;/p&gt;
&lt;h3 id=&quot;planned-posts-&quot;&gt;Planned posts:&lt;/h3&gt;
&lt;p&gt;The next following posts will describe:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to set up the &lt;a href=&quot;/posts/2013-12-10_Setting-up-Sherlock-serverside.html&quot;&gt;Hyper-V host machine&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;How to prepare a virtual machine for use as a &lt;a href=&quot;/posts/2013-12-11_Setting-up-Sherlock-virtualmachines.html&quot;&gt;testing environment&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;How to &lt;a href=&quot;/posts/2013-12-24_Setting-up-Sherlock-verification.html&quot;&gt;verify&lt;/a&gt;  that all the environments have been configured correctly.&lt;/li&gt;
&lt;li&gt;How to integrate with a &lt;a href=&quot;/posts/2014-01-13_Integrating-Sherlock-with-a-build-server.html&quot;&gt;build server&lt;/a&gt;. This will discuss build jobs, build scripts and test configuration.&lt;/li&gt;
&lt;li&gt;A description on how I used Sherlock to &lt;a href=&quot;/posts/2014-02-18_Regression-testing-console-applications.html&quot;&gt;perform integration tests&lt;/a&gt; on the console application of &lt;a href=&quot;/projects/apollo.html&quot;&gt;Apollo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And a description on how I used Sherlock to &lt;a href=&quot;/posts/2014-03-31_Regression-testing-gui-applications.html&quot;&gt;perform integration tests&lt;/a&gt; on a WPF application of &lt;a href=&quot;/projects/apollo.html&quot;&gt;Apollo&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
</content>
        </entry>
    
        <entry>
            <title>Nuclei release - V0.7.0.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-04_Nuclei-Release-V0700.html"/>
            <updated>2013-12-04T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-04_Nuclei-Release-V0700.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/releases/tag/V0.7.0.0&quot;&gt;V0.7.0.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nuclei.html&quot;&gt;Nuclei&lt;/a&gt; library has been released. This release adds support for grouping timing results based on their logical area.&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; group1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TimingGroup(); 
&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (Profiler.Measure(group1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;My first timing group&quot;&lt;/span&gt;))
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; group2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TimingGroup();
    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (Profiler.Measure(
        group2, 
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;This timing is not a child of the first one&quot;&lt;/span&gt;))
    {
        &lt;span class=&quot;hljs-comment&quot;&gt;// Do stuff here ...&lt;/span&gt;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (Profiler.Measure(
        group1, 
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;This timing is a child of the first one&quot;&lt;/span&gt;))
    {
        &lt;span class=&quot;hljs-comment&quot;&gt;// Do stuff here ...&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content>
        </entry>
    
        <entry>
            <title>Setting up nAnicitus</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-12-03_Setting-up-nAnicitus.html"/>
            <updated>2013-12-03T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-12-03_Setting-up-nAnicitus.html</id>
            <content type="html">&lt;p&gt;In this post I will explain how to install and configure the &lt;a href=&quot;/projects/nanicitus.html&quot;&gt;nAnicitus&lt;/a&gt; windows service. nAnicitus is a windows service that acts as a gatekeeper for the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/ff558848(v=vs.85).aspx&quot;&gt;SymStore&lt;/a&gt; application. SymStore provides a relatively simple way to create a local / private &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms680693%28v=vs.85%29.aspx&quot;&gt;symbol server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This statement should bring up a few questions, cunning questions like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why would a development team even need a symbol server?&lt;ul&gt;
&lt;li&gt;The PDB files which are produced as the result of a build are just as unique as assemblies or executables. Each assembly has &lt;a href=&quot;http://www.wintellect.com/blogs/jrobbins/pdb-files-what-every-developer-must-know&quot;&gt;one specific PDB&lt;/a&gt; file to which it is linked via a GUID. Each time an assembly is build a new GUID is embedded, even if the source code has not changed. This means that in order to debug a given assembly for which you don&amp;#39;t have the source code, which can happen if you debug other peoples libraries or if you are debugging a crash dump, then you will need the linked PDB file. Hence in order to enable debugging of releases one has to either place the PDB in the same location as the binaries or one has to store the PDB files in a symbol server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why would a development team not use SymStore directly?&lt;ul&gt;
&lt;li&gt;The disadvantage of SymStore is that it is not capable of processing &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/ff558851(v=vs.85).aspx&quot;&gt;multiple PDB files at the same time&lt;/a&gt;, i.e. it should really only be called by one user at the time. By providing a windows service that synchronizes the access to the SymStore application it is possible for multiple users to add symbols to the symbol server without having to worry about the integrity of the symbol server files.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before we continue with the installation of nAnicitus lets have a quick look at how nAnicitus works. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user creates a &lt;a href=&quot;http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-symbol-package&quot;&gt;NuGet symbol package&lt;/a&gt; and places that in a pre-configured upload directory.&lt;/li&gt;
&lt;li&gt;nAnicitus unpacks the symbol package and extracts the PDB files and the source files.&lt;/li&gt;
&lt;li&gt;For each PDB file it is determined which source files were used to create it. Based on that information a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms680641%28v=vs.85%29.aspx&quot;&gt;symbol stream&lt;/a&gt; is created and inserted into the PDB file which points to the source server path for the source files belonging to the PDB file.&lt;/li&gt;
&lt;li&gt;The PDB files are uploaded via &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/ff558848(v=vs.85).aspx&quot;&gt;SymStore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The source files are uploaded to the source server path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before installing nAnicitus it is necessary to install the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/gg463009.aspx&quot;&gt;debugging tools for windows&lt;/a&gt;. Make sure to install the complete set of tools so that you get all the symbol server tools as well. Once the the debugging tools are installed you can &lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/releases&quot;&gt;download&lt;/a&gt; and unzip the latest version of nAnicitus. &lt;/p&gt;
&lt;p&gt;The next step is to update the configuration file with the directory and UNC paths:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DebuggingToolsDirectory:&lt;/strong&gt; The debugging tools directory (e.g. &lt;code&gt;c:\Program Files (x86)\Windows Kits\8.0\Debuggers\x64&lt;/code&gt;). This path may be left out if it is in the default location (as given here).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SourceIndexUncPath:&lt;/strong&gt; The UNC path to the directory where the indexed sources will be placed (e.g. &lt;code&gt;\\MyServer\sources&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SymbolsIndexUncPath:&lt;/strong&gt; The UNC path to the directory where the indexed symbols (i.e. PDBs) will be placed (e.g. &lt;code&gt;\\MyServer\symbols&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProcessedPackagesPath:&lt;/strong&gt; The directory where the NuGet symbol packages will be dropped after they are processed. The NuGet symbol packages are saved in this directory so that it is possible to reprocess the packages if for instance the location of the source path changes, e.g. after switching to a new server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UploadPath:&lt;/strong&gt; The directory where the NuGet symbol packages are placed for nAnicitus to process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally to install the application as a windows service, open a command line window with administrative permissions, navigate to the nAnicitus install directory and execute the following command:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs cmake&quot;&gt;    Nanicitus.Service &lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the service is installed use the normal windows services control to change the properties of the service.&lt;/p&gt;
&lt;p&gt;And now you should have a working symbol server! &lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>PG2 - Bumpy air, smooth air</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-11-19_PG2-Bumpy-air-smooth-air.html"/>
            <updated>2013-11-19T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-11-19_PG2-Bumpy-air-smooth-air.html</id>
            <content type="html">&lt;p&gt;Once more the &lt;a href=&quot;/tags/PG2.html&quot;&gt;PG2&lt;/a&gt; group gathered for some flying over the weekend. The action this time was at Maioro with a southerly wind providing for a very bumpy ride. Because of the angle between the wind and the cliff the lift band was very narrow and so one had to work hard to stay in the air. Over the course of the day I managed to get three long flights in but unfortunately I only managed to top land one of them, on the other two I bombed out and had to do a decent bit of walking to get back to the start place. Overall it was a good learning experience flying in very bumpy air with not much lift.&lt;/p&gt;
&lt;p&gt;As a little treat for myself I had taken the Monday off from work so that I could go flying if the weather proved to be suitable. The weather forecast for Monday showed great promise for some good flying.&lt;/p&gt;
&lt;p&gt;On Monday a &lt;a href=&quot;http://en.wikipedia.org/wiki/Convergence_zone&quot;&gt;convergence&lt;/a&gt; hanging around over the city so our instructor decided that with some luck the wind would turn northerly which would make &lt;a href=&quot;http://en.wikipedia.org/wiki/North_Head,_New_Zealand&quot;&gt;North head&lt;/a&gt; an excellent place to fly. After some para-waiting the weather gods decided that the southerly wind would break through the convergence which thereby ended our hopes for flying at North head. Fortunately there are quite a few places around Auckland where flying is possible so our instructor suggested going to &lt;a href=&quot;http://en.wikipedia.org/wiki/Muriwai&quot;&gt;Maori bay&lt;/a&gt;. When we got to Maori bay it turned out that the wind was smooth and from a suitable direction, so indeed the site was flyable. My first flight was a tandem flight with my instructor. While flying he showed me how to pick the right soaring lines and what to look out for. In the 30 or so minutes that we flew the tandem I learned heaps, and I did most of the flying, except for the start and the landing. &lt;/p&gt;
&lt;p&gt;After the tandem flight I managed to get two shorter flights in with my own glider. The launches were a bit more tricky than I was used to because the start place was on angled ground with the wind coming in slightly off angle. However I managed to get the glider to launch without too much trouble in both situations and I did some amazing flying in yet another beautiful New Zealand beach location.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>nAdoni release - V0.2.0.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-11-13_NAdoni-Release-V0200.html"/>
            <updated>2013-11-13T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-11-13_NAdoni-Release-V0200.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/nAdoni/releases/tag/V0.2.0.0&quot;&gt;V0.2.0.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nadoni.html&quot;&gt;nAdoni&lt;/a&gt; update manifest builder project has been released. This release adds the &lt;code&gt;nAdoni.KeyGenerator&lt;/code&gt; console application to the project. This application can be used to generate the RSA key files which are necessary in order to build the manifest files.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>nAdoni release - V0.2.1.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-11-13_NAdoni-Release-V0210.html"/>
            <updated>2013-11-13T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-11-13_NAdoni-Release-V0210.html</id>
            <content type="html">&lt;p&gt;In my haste to release the new &lt;a href=&quot;2013-11-13_NAdoni-Release-V0200.html&quot;&gt;KeyGenerator&lt;/a&gt; functionality I completely forgot to add the packaging of said KeyGenerator. Hence I hereby present Version &lt;a href=&quot;https://github.com/pvandervelde/nAdoni/releases/tag/V0.2.1.0&quot;&gt;V0.2.1.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nadoni.html&quot;&gt;nAdoni&lt;/a&gt; update manifest builder project which adds the ZIP archive containing the &lt;code&gt;nAdoni.KeyGenerator&lt;/code&gt; console application.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>PG2 - Up and down the coast</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-11-11_PG2-Up-and-down-the-coast.html"/>
            <updated>2013-11-11T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-11-11_PG2-Up-and-down-the-coast.html</id>
            <content type="html">&lt;p&gt;Last weekend once again the wind was suitable for flying at &lt;a href=&quot;http://en.wikipedia.org/wiki/Kariotahi_Beach&quot;&gt;Kario&lt;/a&gt; and so more flying was had. The weather forecast indicated that the wind was going to be pretty strong and as we arrived on the beach that was confirmed by the general feel and the wind socks. &lt;/p&gt;
&lt;p&gt;The first thing I had to deal with was the fact that launching was tricky due to the strong winds. The first launch went off without problems but on the second one I got picked up as the glider rose above my head, causing me to fall on my back (yay for back protectors) and the glider to overshoot and collapse. The conclusion was too much brake and not enough moving towards the glider.
At that point Eva taught me how to do sideways launch where you lay the glider out at an angle to the wind, pull one end up first and then use brake on the high side to stabilize the glider above your head. Using this method the glider generates less pull and is relatively easy to control during the launching phase. Unlike the reverse launch however you need to be much more aggressive in pulling up the glider because if you are not, you give the low side time to catch up which defeats the entire purpose of using this method. In fact you want the whole thing to come up on an angle so that you can control the inflation speed.
It took me several attempts at getting the sideways launch right but in the end I got the hang of it well enough to start using them as my launch technique for the day.&lt;/p&gt;
&lt;p&gt;Because the wind was so strong it was easy to get up high it was possible for me to practise big ears again without having to worry about being forced to land. I also got to try a 360 degree turn which looks strange as you look at the ground track because while you are turning through 360 degrees, the ground track is making a rather deformed curl shape. At the end of the turn it even feels like you snap into place.&lt;/p&gt;
&lt;p&gt;Finally at the end of the day we flew back to the car park from the launch site, a flight of about 6 or so kilometres. All in all once again a good days flying.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>nAnicitus release - V0.1.3.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-10-31_nAnicitus-Release-V0130.html"/>
            <updated>2013-10-31T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-10-31_nAnicitus-Release-V0130.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/nAnicitus/releases/tag/V0.1.3.0&quot;&gt;V0.1.3.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nanicitus.html&quot;&gt;nAnicitus&lt;/a&gt; symbol store application has been released. This release adds additional logging and improves the handling of unexpected situations during processing of symbol packages.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock release - V0.4.7.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-10-30_Sherlock-Release-V0470.html"/>
            <updated>2013-10-30T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-10-30_Sherlock-Release-V0470.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases/tag/v0.4.7.0&quot;&gt;V0.4.7.0&lt;/a&gt; of the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; regression testing application has been released. This release provides one bug fix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Windows job object created by the Sherlock service to ensure termination of the Sherlock.Service.Master and Sherlock.Service.Executor applications is now set to only include direct children (i.e. Sherlock.Service.Master / Sherlock.Service.Executor) in the job and not the indirect children. This allows the application under test to create its own job objects even on Windows 7 (which does not allow nesting of job objects) (&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/11&quot;&gt;issue #11&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Weekend at Waipapa - Drying tomatoes</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-10-28_Weekend-at-Waipapa-drying-tomatoes.html"/>
            <updated>2013-10-28T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-10-28_Weekend-at-Waipapa-drying-tomatoes.html</id>
            <content type="html">&lt;p&gt;On the &lt;a href=&quot;http://en.wikipedia.org/wiki/Labour_Day#New_Zealand&quot;&gt;long weekend&lt;/a&gt; my friend Chris organised a climbing trip to &lt;a href=&quot;http://www.freeclimb.co.nz/wharepapa.html&quot;&gt;lake Waipapa&lt;/a&gt;, a climbing area with many delicate slab climbs.&lt;/p&gt;
&lt;p&gt;We spend both days at the main wall working on some of the climbs. For Chris his climb of the weekend was &amp;#39;Millennium madness&amp;#39;, an amazing corner &lt;a href=&quot;http://en.wikipedia.org/wiki/Traditional_climbing&quot;&gt;trad&lt;/a&gt; climb which is rated &lt;a href=&quot;http://en.wikipedia.org/wiki/Grade_%28climbing%29#Ewbank&quot;&gt;18&lt;/a&gt;. From the trad gear side you have to make sure that your rack has several finger size pieces of gear so that you can use some at the start of the climb and some near the middle. The crux of the climb is the first 5 or so meters where you have to figure out how to switch between the different foot placements that are available. The climber starts out bridging between a set of small ledges and then transitions to using the crack to foot-jam and then to using some small indentations on the main face. The tricky bit is getting the transition between the different types of foot placements correct. &lt;/p&gt;
&lt;p&gt;On saturday Chris had two attempts at cleaning &amp;#39;Millennium Madness&amp;#39; but didn&amp;#39;t quite get it right. It seems that the first time climbing in Waipapa after winter is always tricky as you are trying to re-acquire the correct climbing techniques for the delicate Waipapa climbs. &lt;/p&gt;
&lt;p&gt;For me the plan was to work my long time project called &amp;#39;Sun dried tomatoes&amp;#39;, a delicate &lt;a href=&quot;http://en.wikipedia.org/wiki/Sport_climbing&quot;&gt;sport&lt;/a&gt; 22. For this climb the main focus is balance and once again foot placements, however unlike &amp;#39;Millennium madness&amp;#39; where there are many features that can serve as hand holds, &amp;#39;sun dried tomatoes&amp;#39; has sections where hand holds are very sparse.&lt;/p&gt;
&lt;p&gt;Over the last two years or so I&amp;#39;ve semi-seriously tried this climb a bunch of times but until this weekend I never found the motivation to put a continuous focus on the climb. During both days I put a top-rope on the climb and worked the moves a number of times. This helped me figure out where the correct foot placements were, where the clipping holds were and in which locations a rest would be possible. In the end I climbed it on top rope four times, eventually working out the moves. And each day I ended the day with a lead attempt. On Saturday I failed to clean it because my head space wasn&amp;#39;t in the right spot, however on Sunday I managed to push through the hard bits and got to the top clean. So that&amp;#39;s another tick in the books and another sweet climb done.&lt;/p&gt;
&lt;p&gt;On to other projects it is now ...&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>PG2 - At the top of the stack</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-10-25_PG2-At-the-top-of-the-stack.html"/>
            <updated>2013-10-25T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-10-25_PG2-At-the-top-of-the-stack.html</id>
            <content type="html">&lt;p&gt;Last weekend I thought I could repeat the &lt;a href=&quot;/posts/2013-10-13_PG2-Spending-a-weekend-in-the-air.html&quot;&gt;full weekend flying&lt;/a&gt; trick that I pulled a few weeks back. The weather forecast was for sunny and windy, but not too windy. So on Saturday morning we drove out to the beach but when we got to the launch site it became clear that it would be touch-and-go due to the high winds. In the end I only got a little hop while practising my launches. After that I practised my ground handling with a &lt;a href=&quot;http://gingliders.com/speedflying/speedriding-gliders/nano/&quot;&gt;Gin Nano&lt;/a&gt; which is a fun little glider but it did feel more like a kite than a real glider.&lt;/p&gt;
&lt;p&gt;The next day was a different story. The wind died down just enough and the sun stayed, all in all a perfect day for flying. Because there were a large number of people the group was split into two, the absolute beginners and the people who had flown before. The latter group immediately set up for their first flights while the former group started with ground handling exercises. I was with the group of people who got to prepare for their first flights immediately. &lt;/p&gt;
&lt;p&gt;Over the day I managed to get three flights in, all with varying levels of success. On the first flight of the day I too rushed and stuffed several things up. First of all I was too enthusiastic with the initial launch which lead to the glider pulling me off my feet and then over flying me. We both ended lying on the ground. Fortunately only my ego was damaged so another attempt was made. On the second start I was more controlled but still kinda jittery during the launch and the run. To top it off I managed to twist the brake line around the rises. So in the end I just fly a circuit down to the ground and landed. No harm done and lots of lessons learned.&lt;/p&gt;
&lt;p&gt;The second flight was a lot better, much more controlled, although my launch still needs work. I&amp;#39;m not checking the canopy before commencing my launch run and during the run I need to remember to have no pressure on the brakes. During the flight I practised using the speed bar, which is a lot harder to push than I thought, and flying with big ears and speed bar. Turns out on the Atlas the big ears go in very easily (make sure you are really only pulling the outer A&amp;#39;s) but it takes a bit of time for them to come out.&lt;/p&gt;
&lt;p&gt;While the first two flights provided plenty of good (and safe) learning moments, neither flight was very special. However the third flight was one of those magic flights. After checking that the airspace was empty I started my launch, which went smoothly, but then somebody flew too close to the start place for me to continue. The instructor told me to keep my position with the glider above my head while the other paraglider flew by, but my limited skill was no match for the strong desire of my glider to fly and slowly we drifted towards the end of the cliff. A little bit of left brake allowed me to fly away from the other paraglider and then the soaring started. The Atlas climbs and climbs and keeps climbing, going higher and higher. Eventually, mostly thanks to the amazing Atlas, I ended up at the top of the stack looking down onto the start field with its tiny people, a whole bunch of other gliders and looking over the hills to the neighbouring towns. Later on I determined, from looking at the height topo&amp;#39;s online, that I must have been somewhere between 100m and 120m above the beach! That to me was a magic moment.&lt;/p&gt;
&lt;p&gt;Unfortunately all magic moments must end, otherwise they wouldn&amp;#39;t be magic anymore, and in this case it was ended by my instructor who thought it would be wise for me to come down while the wind was still behaving so on with the big ears and the speed bar and down I went.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock release - V0.4.6.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-10-24_Sherlock-Release-V0460.html"/>
            <updated>2013-10-24T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-10-24_Sherlock-Release-V0460.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases/tag/v0.4.6.0&quot;&gt;V0.4.6.0&lt;/a&gt; of the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; regression testing application has been released. This release provides two bug fixes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The MSI installer now verifies that all directories exist before writing to them (&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/9&quot;&gt;issue #9&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The X-copy installer now verifies that the destination directory exists before copying files to it (&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/10&quot;&gt;issue #10&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock release - V0.4.5.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-10-23_Sherlock-Release-V0450.html"/>
            <updated>2013-10-23T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-10-23_Sherlock-Release-V0450.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases/tag/v0.4.5.0&quot;&gt;V0.4.5.0&lt;/a&gt; of the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; regression testing application has been released. This release provides one improvement and one bug fix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The test report can now include files generated during the test (&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/5&quot;&gt;issue #5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sherlock.Service no longer includes a manifest signing key, instead the key is obtained via a configuration setting (&lt;a href=&quot;https://github.com/pvandervelde/Sherlock/issues/8&quot;&gt;issue #8&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Nuclei release - V0.6.7.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-10-23_Nuclei-Release-V0670.html"/>
            <updated>2013-10-23T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-10-23_Nuclei-Release-V0670.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/releases/tag/V0.6.7.0&quot;&gt;V0.6.7.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nuclei.html&quot;&gt;Nuclei&lt;/a&gt; library has been released. This release fixes a bug in the processing of &lt;code&gt;ICommandSet&lt;/code&gt; return tasks which caused the processor to throw an exception if the return task was a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ee372288.aspx&quot;&gt;continuation task&lt;/a&gt;. This bug fix means it is now possible to chain tasks and return the final task from an &lt;code&gt;ICommandSet&lt;/code&gt; object. An example of this behaviour is given in the following section of code.&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; IMyCommandSet : ICommandSet
{
    Task DoSomethingAwesome();
}

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; MyCommand : IMyCommandSet
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Task &lt;span class=&quot;hljs-title&quot;&gt;DoSomethingAwesome&lt;/span&gt;()
    {
        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; firstTask = Task.Factory.StartNew(
            () =&amp;gt; Thread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;));
        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; secondTask = firstTask.ContinueWith(
            t =&amp;gt; Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Awesome sauce&quot;&lt;/span&gt;)); 
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; secondTask
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content>
        </entry>
    
        <entry>
            <title>PG2 - Spending a weekend in the air</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-10-13_PG2-Spending-a-weekend-in-the-air.html"/>
            <updated>2013-10-13T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-10-13_PG2-Spending-a-weekend-in-the-air.html</id>
            <content type="html">&lt;p&gt;Last weekend another episode in my &lt;a href=&quot;/tags/PG2.html&quot;&gt;PG2 course&lt;/a&gt; took place with flights happening on both Saturday &lt;em&gt;and&lt;/em&gt; Sunday. Both days started with an off shore breeze but as the day progressed the sea breeze brought six to seven knots of wind from the South-West and we were good to go.&lt;/p&gt;
&lt;p&gt;This time we flew from the high launch at at &lt;a href=&quot;http://en.wikipedia.org/wiki/Kariotahi_Beach&quot;&gt;Kariotahi&lt;/a&gt; which has the lowest point of the launch at about 90m above the beach. The walk up follows a narrow, relatively steep, sandy and muddy path which increased everybody&amp;#39;s desire to top land. Fortunately for us our excellent instructor always managed to get us into a position where top landings were possible, in spite of the sometimes lacking wind strength. &lt;/p&gt;
&lt;p&gt;&lt;img align=&quot;left&quot; alt=&quot;Cruising around on my Gin Atlas&quot; src=&quot;/images/paragliding/paraglide_0006.JPG&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The main learning point for this weekend was the &lt;a href=&quot;http://en.wikipedia.org/wiki/Paragliding#Reverse_launch&quot;&gt;reverse launch&lt;/a&gt;. The technique I am being taught has, in some places, been called the &lt;a href=&quot;http://sydneyparagliding.com/flying-techniques/the-effortless-reverse-launch-technique/&quot;&gt;Mitsos reverse launch&lt;/a&gt;. The reverse launch method provides a lot more control over the glider while it is on the ground than the forward launch method, not in the least because one can actually see what the glider is doing. &lt;/p&gt;
&lt;p&gt;For me the hardest part of the reverse launch method so far is controlling the glider as it rises above my head. The launch will go well as long as the glider rises evenly, but as soon as it slides to the right or left side it is hard to get it back to the middle. The second area to focus on is coordinating the turn and the drive when actually launching. Normally I can execute the turn without too much trouble but I don&amp;#39;t always drive correctly so a lot more practise is in order. Fortunately the instructors have given me an old harness and an old glider that I can use to practise my ground handling on days that we&amp;#39;re not flying. In fact I would be doing that right now if there wasn&amp;#39;t a near gale force wind outside ...&lt;/p&gt;
&lt;p&gt;Over the course of the two days I managed to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Six flights of differing lengths with one flight of 30 minutes and others between five and ten minutes long.&lt;/li&gt;
&lt;li&gt;Four top landings and two landings near the car park. In all cases the instructor guided me on my landing spot selection and approach paths.&lt;/li&gt;
&lt;li&gt;One forwards launch and five reverse launches which all went well except for one reverse launch where I bounced up and down due to a lacking acceleration run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally I have to say that the Gin Atlas is an amazing glider. I am by no means a good pilot, after all I&amp;#39;m just learning to fly but the Atlas consistently lets me fly higher than nearly all other gliders, save for some of the super high performance gliders. During the weekend all the other gliders had to, at one point or another, work quite hard to stay at the height of the launch site, or even to scratch their way back up to the launch height. The Atlas just only dropped down to the height of the launch a few times, and each time it did a minor puff of wind allowed it to gain more than sufficient height again.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Nuclei release - V0.6.6.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-10-12_Nuclei-Release-V0660.html"/>
            <updated>2013-10-12T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-10-12_Nuclei-Release-V0660.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/releases/tag/V0.6.6.0&quot;&gt;V0.6.6.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nuclei.html&quot;&gt;Nuclei&lt;/a&gt; library has been released. This release adds the ability to specify the name and version of the application in the log file. If no application name or version is specified then the information from &lt;code&gt;Assembly.GetEntryAssembly()&lt;/code&gt; is used. &lt;/p&gt;
&lt;p&gt;The application name and version can be specified when creating a new logger via the &lt;code&gt;LoggerBuilder&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs cs&quot;&gt;IConfiguration configuration = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyConfiguration();
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; logger = LoggerBuilder.ForFile(
    &lt;span class=&quot;hljs-string&quot;&gt;@&quot;c:\mylogfile.txt&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DebugLogTemplate(configuration, () =&amp;gt; DateTimeOffset.Now),
    applicationName,
    applicationVersion);
&lt;/code&gt;&lt;/pre&gt;
</content>
        </entry>
    
        <entry>
            <title>Nuclei release - V0.6.5.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-09-26_Nuclei-Release-v0650.html"/>
            <updated>2013-09-26T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-09-26_Nuclei-Release-v0650.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/releases/tag/V0.6.5.0&quot;&gt;V0.6.5.0&lt;/a&gt; of the &lt;a href=&quot;/projects/nuclei.html&quot;&gt;Nuclei&lt;/a&gt; library has been released. This release adds an option to allow the user to select which
types of channels the communication layer is allowed to use. The communication layer can be allowed to use TCP/IP channels, named pipe channels or both.&lt;/p&gt;
&lt;p&gt;In the previous versions in the constructor of the &lt;code&gt;CommunicationModule&lt;/code&gt; needed to be provided with a 
list of &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/wiki/Nuclei.Communication#communicationsubject&quot;&gt;communication subjects&lt;/a&gt; and a flag indicating if &lt;a href=&quot;https://github.com/pvandervelde/Nuclei/wiki/Nuclei.Communication#endpoints-and-their-discovery&quot;&gt;channel discovery&lt;/a&gt; was allowed.&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; builder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ContainerBuilder(); 
builder.RegisterModule(
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CommunicationModule(
        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;CommunicationSubject&amp;gt;
            {
                CommunicationSubjects.Dataset,
            },
        &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In V0.6.5.0 an extra parameter needs to be provided which indicates which types of channel the communication layer is allowed to use to communicate with other instances. The allowable options are &lt;code&gt;ChannelType.NamedPipe&lt;/code&gt; and &lt;code&gt;ChannelType.TcpIP&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs cs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; builder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ContainerBuilder();
builder.RegisterModule(
    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CommunicationModule(
        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;CommunicationSubject&amp;gt;
            {
                CommunicationSubjects.Dataset,
            },
        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[]
            {
                ChannelType.NamedPipe,
                ChannelType.TcpIP,
            }, 
        &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
</content>
        </entry>
    
        <entry>
            <title>nRefs release - V0.1.0.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-09-25_nRefs-Release-v0100.html"/>
            <updated>2013-09-25T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-09-25_nRefs-Release-v0100.html</id>
            <content type="html">&lt;p&gt;The &lt;a href=&quot;https://github.com/pvandervelde/nRefs/releases/tag/v0.1.0.0&quot;&gt;first release&lt;/a&gt; of the &lt;a href=&quot;/projects/nRefs.html&quot;&gt;nRefs&lt;/a&gt; assembly reference extraction application has been released. This release&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The test output now includes an XML report with all the messages and an indication of test success or failure.&lt;/li&gt;
&lt;li&gt;Removed the Test data directory settings from the web service because test packages are now always dropped in the App_Data directory&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>How this blog was created</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-09-25_How-this-blog-was-created.html"/>
            <updated>2013-09-25T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-09-25_How-this-blog-was-created.html</id>
            <content type="html">&lt;p&gt;A long time ago, in a location far, far, far away there was a hero in search for a quest ... &lt;/p&gt;
&lt;p&gt;And he searched ...&lt;/p&gt;
&lt;p&gt;And he searched .... &lt;/p&gt;
&lt;p&gt;And .. oh never mind, our hero he is not the object of this current post, thus we shall be leaving him in some weird limbo looking for his quest... oh well. The topic of this post is how this blog / website was build. It turns out that building anything in HTML, CSS, Node.js and all the other cool web technologies isn&amp;#39;t really my strong suit. However I&amp;#39;m hoping that the description of how I build this site may be useful to somebody at some point in time, if only to have a good laugh at my lack of CSS skills.&lt;/p&gt;
&lt;p&gt;As much as I love writing code, the idea of writing my content in an angle bracket language didn&amp;#39;t really attract me so the plan was hatched (it came out of a purple egg, by the way) to write (nearly) all content in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; by using &lt;a href=&quot;http://docpad.org&quot;&gt;Docpad&lt;/a&gt;. Given that I&amp;#39;ve recently started using &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt; for my open source projects why not use it for version control and GitHub pages to serve my website. &lt;/p&gt;
&lt;p&gt;I won&amp;#39;t bore you with the details on how to install Docpad, the Docpad website has an excellent introduction to all those things. Once the initial install is done Docpad allows you to create a skeleton website by executing the following command&lt;/p&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs dos&quot;&gt;Docpad run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At which point Docpad presents a list of possible skeletons to use. In my case I selected the &lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;HTML5 boilerplate template&lt;/a&gt;. In order to get a nice layout quickly I also used the &lt;a href=&quot;http://www.freecsstemplates.org/previews/opentools/&quot;&gt;Open tools&lt;/a&gt; template. &lt;/p&gt;
&lt;p&gt;Once I had the basic site layout sorted it was time to focus creating my own sections. Fortunately Docpad has a large number of plugins that provide useful additions to the generation process. For the generation of this site the following plugins are used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/grassator/docpad-plugin-datefromfilename&quot;&gt;datefromfilename&lt;/a&gt; - Extracts the date of a post from the file name.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docpad.org/plugin/gist/&quot;&gt;gist&lt;/a&gt; - Adds &lt;a href=&quot;https://gist.github.com/&quot;&gt;GitHub gists&lt;/a&gt; to a page.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docpad.org/plugin/highlightjs/&quot;&gt;highlightjs&lt;/a&gt; - Provides syntax highlighting for code samples. My current plan is to use this for the smaller samples and use GitHub gists for the larger ones.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lucor/docpad-plugin-navlinks&quot;&gt;navlinks&lt;/a&gt; - Adds navigation links to the bottom of each post, pointing at the previous and next post.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docpad.org/plugin/related/&quot;&gt;related&lt;/a&gt; - Allows you to find all related documents based on a given set of tags.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rantecki/docpad-plugin-tagging&quot;&gt;tagging&lt;/a&gt; - Generates the tag cloud for the sidebar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all the toys sorted it was time to integrate them in the templates.&lt;/p&gt;
&lt;h3 id=&quot;menu&quot;&gt;Menu&lt;/h3&gt;
&lt;p&gt;The top level menu is based on a collection which contains all pages that have their &lt;code&gt;isPage&lt;/code&gt; flag set to &lt;code&gt;true&lt;/code&gt;. Note that we also assume that these pages have 
the default layout. One thing to note is that the docpad.coffee configuration file seems to be sensitive to the type of whitespace you use. Either use spaces or tabs, but don&amp;#39;t mix them, otherwise you may get some weird errors.&lt;/p&gt;
&lt;script src='https://gist.github.com/6375681.js?file=collections.pages.docpad.coffee'&gt;&lt;/script&gt;

&lt;p&gt;Once the collection has been filled with pages it is used to create an unordered list with an additional highlight placed on the currently active page&lt;/p&gt;
&lt;script src='https://gist.github.com/6375681.js?file=menu.default.html'&gt;&lt;/script&gt;

&lt;h3 id=&quot;sidebar&quot;&gt;Sidebar&lt;/h3&gt;
&lt;p&gt;The sidebar contains three different sections. The first section is the about section which is nothing special. The &lt;em&gt;recent&lt;/em&gt; and &lt;em&gt;tags&lt;/em&gt; sections are more interesting from a website construction perspective. The &lt;em&gt;recent&lt;/em&gt; section based on the &lt;em&gt;frontpage&lt;/em&gt; collection which grabs all items from the posts and 
projects subdirectories and then sorts them by date. The &lt;em&gt;recent&lt;/em&gt; section only display the last 10 items in that collection.&lt;/p&gt;
&lt;script src='https://gist.github.com/6375681.js?file=recent.default.html'&gt;&lt;/script&gt;

&lt;p&gt;The &lt;em&gt;tags&lt;/em&gt; section is based on a collection provided by the tagging plugin. The font-size of the tag is based on the weight assigned to the tag by the tagging plugin. &lt;/p&gt;
&lt;script src='https://gist.github.com/6375681.js?file=tags.default.html'&gt;&lt;/script&gt; 

&lt;p&gt;Each tag links to a page that contains all the posts that contain that tag.&lt;/p&gt;
&lt;h3 id=&quot;projects-tag-indexes-and-posts&quot;&gt;Projects, tag indexes and posts&lt;/h3&gt;
&lt;p&gt;The project pages all have a shared layout which provides them with a title and a section that lists all the posts tagged with the name of the project&lt;/p&gt;
&lt;script src='https://gist.github.com/6375681.js?file=project-linkedposts.html'&gt;&lt;/script&gt;

&lt;p&gt;Posts are displayed in three different places: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The home page&lt;/li&gt;
&lt;li&gt;The tag index page, containing all posts with a given tag&lt;/li&gt;
&lt;li&gt;The post page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All pages use the same partial layout file in order to display the post.&lt;/p&gt;
&lt;script src='https://gist.github.com/6375681.js?file=post-content.html'&gt;&lt;/script&gt; 

&lt;p&gt;The only difference between the post page and the other pages is that the post page will display all the comments. The comment system is based on
&lt;a href=&quot;http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html&quot;&gt;comments on a GitHub issue&lt;/a&gt; and uses a small amount of Javascript to pull the comments across into the comment list.&lt;/p&gt;
&lt;script src='https://gist.github.com/6375681.js?file=post.html'&gt;&lt;/script&gt;


&lt;h3 id=&quot;acknowledgements-&quot;&gt;Acknowledgements:&lt;/h3&gt;
&lt;p&gt;Finally there some people that have provided some descriptions of how their own blogs were created with Docpad (or other static generators). Below are the posts that I used to assemble my own blog. A big thank you to the original posters!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html&quot;&gt;Ivan Zuzak&lt;/a&gt; for his post describing how to use GitHub issues as a way to provide comments on a blog post.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://takitapart.com&quot;&gt;takitapart&lt;/a&gt; provided an &lt;a href=&quot;http://takitapart.com/posts/organizing-docpad/&quot;&gt;excellent&lt;/a&gt; post describing how to organise content in a Docpad website.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lucor.github.io&quot;&gt;Luca&amp;#39;s forge&lt;/a&gt; provided a good start to using Docpad in his &lt;a href=&quot;http://lucor.github.io/post/migrating-from-octopress-to-docpad/&quot;&gt;migration&lt;/a&gt; post. This site also provides some very nice ideas around the way posts and tags should look.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.delarre.net&quot;&gt;Ben Delarre&lt;/a&gt; provided a nice &lt;a href=&quot;http://www.delarre.net/posts/blogging-with-docpad/&quot;&gt;summary&lt;/a&gt; of his own Docpad setup.&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock release - V0.4.4.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-09-21_Sherlock-Release-v0440.html"/>
            <updated>2013-09-21T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-09-21_Sherlock-Release-v0440.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases/tag/v0.4.4.0&quot;&gt;V0.4.4.0&lt;/a&gt; of the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; regression testing application has been released. This release provides two improvements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The test output now includes an XML report with all the messages and an indication of test success or failure.&lt;/li&gt;
&lt;li&gt;Removed the Test data directory settings from the web service because test packages are now always dropped in the App_Data directory&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>PG2 - Second day</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-09-16_PG2-Second-day-flying.html"/>
            <updated>2013-09-16T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-09-16_PG2-Second-day-flying.html</id>
            <content type="html">&lt;p&gt;On Sunday the weather was good enough for some flying on the west coast. So at 11.30am about 8 of us gathered at &lt;a href=&quot;http://en.wikipedia.org/wiki/Kariotahi_Beach&quot;&gt;Kario&lt;/a&gt; and the second day of my &lt;a href=&quot;/tags/PG2.html&quot;&gt;PG2&lt;/a&gt; had started.&lt;/p&gt;
&lt;p&gt;&lt;img align=&quot;left&quot; alt=&quot;Paraglider soaring high over beautiful west coast&quot; src=&quot;/images/paragliding/paraglide_0004.JPG&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The first thing to notice about the west coast is that it looks amazing, rugged and empty. It seems that with paragliding besides the flying I also get to look out over the amazing landscapes New Zealand has. Double win!&lt;/p&gt;
&lt;p&gt;But before I get to fly as a qualified pilot a lot more training has to be had and that we did. The day started off with some ground handling exercises on the really old gliders. My first taste of &lt;a href=&quot;http://en.wikipedia.org/wiki/Paragliding#Reverse_launch&quot;&gt;reverse launching&lt;/a&gt; except with out the actual turning around and flying bit. It turns out reverse launching isn&amp;#39;t actually as simple as I thought it would be. Having flown kites for many years I thought I would get the reverse launch down pretty easily but when the gliders get larger and the controls are reversed things get difficult. More practise is required ...&lt;/p&gt;
&lt;p&gt;After the ground handling a few short flights down the slope were made with a larger glider to practise the forward starts and then it was time to get some actual flights done. I managed to get three short flights in where I got to practise forward starts, turning and then landing. Some observations (which are probably obvious to those that have flown paragliders before): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If there is a distinct edge at the end of the start field then when you fly out over that edge the glider will climb rapidly due to the wind blasting straight up the edge. This is nothing to worry about, although it feels slightly disconcerting at first.&lt;/li&gt;
&lt;li&gt;A paraglider moves around more than you would think, even in a nice constant sea breeze&lt;/li&gt;
&lt;li&gt;If you land at even a slight angle to the wind it gets really hard to put the glider on its back, instead of its side. I got only one landing totally right.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img align=&quot;right&quot; alt=&quot;Flying my new Gin Atlas&quot; src=&quot;/images/paragliding/paraglide_0005.JPG&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And then it was time for the unexpected highlight of the day. When I paid for the PG2 course I paid for a combination package, which includes the PG2 course, a glider and a harness. Now I still haven&amp;#39;t selected a harness but I have selected the glider, a bright red &lt;a href=&quot;http://gingliders.com/paragliders/atlas/&quot;&gt;Gin Atlas&lt;/a&gt;. I didn&amp;#39;t expect to be able to fly it so soon in my course but after my initial three flights both instructors gave me the go ahead to fly it. &lt;/p&gt;
&lt;p&gt;I managed a further two flights with it. The first one was a nice long soaring flight where I got to get a feel for the glider. At the end of the flight I managed to get quite a bit of height. And to top that flight off the instructor guided me in for a top landing upon which I nearly broke my glider by stuffing up the landing. Fortunately no gliders or pilots where hurt.&lt;/p&gt;
&lt;p&gt;The last flight of the day was back down to the beach to pack our equipment and drive home. I set myself up for a landing approach and promptly overshot my selected landing spot by about 100 meters or so. I guess selecting and landing in the right spot is yet another skill I have to work on.&lt;/p&gt;
&lt;p&gt;All in all it was an amazing day of flying, especially the nice soaring flight on my shiny new glider.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock release - V0.4.3.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-09-14_Sherlock-Release-v0430.html"/>
            <updated>2013-09-14T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-09-14_Sherlock-Release-v0430.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases/tag/v0.4.3.0&quot;&gt;V0.4.3.0&lt;/a&gt; of the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; regression testing application has been released. This release provides several bug fixes for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The console application: Changed the way the REST URLs are constructed so that it works if the web service on a sub-part of a domain, e.g. &lt;code&gt;http://myserver/sherlock&lt;/code&gt; works now&lt;/li&gt;
&lt;li&gt;The web service: Added Trace.Write statements for ease of debugging&lt;/li&gt;
&lt;li&gt;The windows service: Fixed a dead-lock bug in the shut-down process and linked all processes via a Windows Job Object to ensure that all child processes are terminated if the service is terminated.&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock release - V0.4.2.0</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-09-11_Sherlock-Release-v0420.html"/>
            <updated>2013-09-11T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-09-11_Sherlock-Release-v0420.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases/tag/v0.4.2.0&quot;&gt;V0.4.2.0&lt;/a&gt; of the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; regression testing application has been released. This release adds one bug fix and one improvement.&lt;/p&gt;
&lt;p&gt;The bug fix is a change to the &lt;code&gt;IsHyperVMachine&lt;/code&gt; and &lt;code&gt;IsPhysicalMachine&lt;/code&gt; stored procedures in order to make them easier to use correctly.&lt;/p&gt;
&lt;p&gt;The improvement is the addition of build steps that package the web projects into a ZIP file for easier deployment. These zip files can now also be retrieved from the &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases/tag/v0.4.2.0&quot;&gt;release note&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Sherlock release - V0.4.0.1</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-09-08_Sherlock-Release-v0401.html"/>
            <updated>2013-09-08T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-09-08_Sherlock-Release-v0401.html</id>
            <content type="html">&lt;p&gt;Version &lt;a href=&quot;https://github.com/pvandervelde/Sherlock/releases/tag/v0.4.0.1&quot;&gt;V0.4.0.1&lt;/a&gt; of the &lt;a href=&quot;/projects/sherlock.html&quot;&gt;Sherlock&lt;/a&gt; regression testing application has been released. This release adds two new features and one improvement.&lt;/p&gt;
&lt;p&gt;The new features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ability to continue with a test sequence after a test step has failed. The test step should indicate that the failure mode is &amp;#39;continue&amp;#39;. Other option is &amp;#39;stop&amp;#39;&lt;/li&gt;
&lt;li&gt;Added a test step that allows executing a console application with a set of input parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following gist gives an overview of what the configuration for the new console test step looks like&lt;/p&gt;
&lt;script src='https://gist.github.com/6483292.js'&gt;&lt;/script&gt;

&lt;p&gt;The improvement is in the HTML output report which is has been overhauled to improve the layout and readability.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>First time paragliding</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-09-03_First-time-paragliding.html"/>
            <updated>2013-09-03T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-09-03_First-time-paragliding.html</id>
            <content type="html">&lt;p&gt;A little while ago I signed up for a &lt;a href=&quot;http://paraglidingnewzealand.com/information/learning-to-fly&quot;&gt;PG2&lt;/a&gt; paragliding course 
with &lt;a href=&quot;http://wingsandwaves.co.nz&quot;&gt;Wings and Waves&lt;/a&gt;. Unfortunately I signed up just before winter crept in and made it impossible to fly. As
we are moving towards spring the weather has been getting better and last Sunday the weather was good enough for us (my girlfriend and me) to
have our first shot at flying a paraglider.&lt;/p&gt;
&lt;p&gt;&lt;img align=&quot;left&quot; alt=&quot;Casey ground handling the old glider&quot; src=&quot;/images/paragliding/paraglide_0001.JPG&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So on Sunday morning we met up with the Wings and Waves crew and drove over to a nice, if some what soggy, hill somewhere around Pukemore, south of the Bombay hills for the first steps of our training. &lt;/p&gt;
&lt;p&gt;The first part consisted of learning how to ground handle a paraglider. Ground handling is the art of controlling the paraglider while on the ground. This turns out to be harder than it first looks. In the air the pilot will normally be centred underneath the paraglider. On the ground however the pilot may not be directly below the paraglider which means the pilot needs to actively move around to keep the paraglider above them.&lt;/p&gt;
&lt;p&gt;&lt;img align=&quot;right&quot; alt=&quot;Me doing a forward start with the old glider&quot; src=&quot;/images/paragliding/paraglide_0002.JPG&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Once we got the hang of the ground handling we started learning forwards starts, or alpine starts. With this method of starting you face forward with the glider behind you. Once you have sorted out the lines you move forwards until the lines are tensioned and then you run at a constant pace. The first glider we used was the really old one we used in ground handling. Given that it was not very large it was pretty easy to run with, and running we did, lots of it.&lt;/p&gt;
&lt;p&gt;Once we got a few good runs in with the old glider the instructor found us a more modern paraglider to play with. This one was considerably larger and far more interesting. Over the remainder of the day we slowly worked our way up the hill, starting from a higher position each time, and being rewarded with a little more flight time and a little more height each time.&lt;/p&gt;
&lt;p&gt;&lt;img align=&quot;left&quot; alt=&quot;Casey having a little flight with the newer glider&quot; src=&quot;/images/paragliding/paraglide_0003.JPG&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In the beginning both my girl friend and me got to use the same glider but it turns out I&amp;#39;ve got a big fat ass and so I had to upgrade to bigger gliders a few more times. Each time being reminded that bigger gliders also mean more backwards pull on start and higher flights. &lt;/p&gt;
&lt;p&gt;In all it was a good day flying. I still have a lot of work to do on all parts of my launching and flying skills (obviously given that this is the first time), but the one thing I really noticed I need to work on is distance estimation and flare timing. I got that wrong a few times and it was fortunate that the landing area was soggy because it made for nice, if what splashy, landings even if I miscalculated my flare timing. &lt;/p&gt;
&lt;p&gt;All in all a good time was had by all and we are definitely keen for more flying. Hopefully with less running and more flying next time.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Why this blog was created</title>
            <link href="http://www.petrikvandervelde.nl/posts/2013-08-30_Why-this-blog-was-created.html"/>
            <updated>2013-08-30T00:00:00.000Z</updated>
            <id>http://www.petrikvandervelde.nl/posts/2013-08-30_Why-this-blog-was-created.html</id>
            <content type="html">&lt;p&gt;A couple of years ago I had a blog on Blogger but that never got further than a few posts, mainly because I ran out of interesting topics to write about. That
and my &lt;a href=&quot;/about.html&quot;&gt;studies&lt;/a&gt; started interfering with life in general ... it seems research does that to ones life. In any case the old blog stalled and no
more posts were written.&lt;/p&gt;
&lt;p&gt;Recently I have been wanting to improve my writing skills, you see, as software engineer I&amp;#39;m reasonably good at writing instructions for a three year
old, eh I mean a computer, but I am not particularly good at writing concise human-friendly text. I have written two dissertations, one for my master degree
and one for my PhD, but neither of those qualify as either concise or human-friendly.&lt;/p&gt;
&lt;p&gt;Given that the only way to get better at writing is to practise, practise and practise some more, I thought writing posts about things that interest me
would be a good way to improve my writing skills. And on top of that it may help me improve my skills in explaining technical constructs as well. Double win.&lt;/p&gt;
&lt;p&gt;The only thing left to answer is what shall I be writing about. Well obviously those things that interest me, mostly being:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My open source &lt;a href=&quot;/projects.html&quot;&gt;projects&lt;/a&gt;. All of them could do with some additional documentation and maybe even some examples. I guess having a 
blog is just an additional reason to finally write those&lt;/li&gt;
&lt;li&gt;All the (exciting) things I get up to when rock climbing or paragliding.&lt;/li&gt;
&lt;li&gt;And if things progress nicely I might write some articles describing some work I am doing at the moment that is a continuation of the software
development I did for my PhD.&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
</feed>